<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Demon的博客</title>
		<link>https://demon-github1996.github.io/posts/</link>
		<description>Recent content in Posts on Demon的博客</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-CN</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 28 Aug 2019 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://demon-github1996.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Day7  面向对象</title>
			<link>https://demon-github1996.github.io/posts/day07/</link>
			<pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
			
			<guid>https://demon-github1996.github.io/posts/day07/</guid>
			<description>面向对象 java的语法： java的组成： 注释 关键字 标识符 数据： 常量： 变量： 数据类型 基本： byte short int long&amp;hellip;.. 引用: 数组： 数组的定义 使用 内存图 异常 遍历 求和 查找 评委打分 二维数组： 循环的嵌套 类 接口
​	类型转换 ​	隐式 ​	强制 ​	符号 ​	基本符号 (){}[].&amp;quot;&amp;quot;&#39;&#39;; ​	(): ​	强制类型 ​	运算 ​	结构语句 ​	方法 ​	​	运算符： ​	算术 ​	赋值 ​	比较 ​	逻辑 ​	三元 ​	位 逻辑语句： ​	顺序结构 ​	选择结构 ifswitch ​	循环结构 for while dowhile break continue 猜数字小游戏</description>
			<content type="html"><![CDATA[<h1 id="面向对象">面向对象</h1>
<p>java的语法：
java的组成：
注释
关键字
标识符
数据：
常量：
变量：
数据类型
基本： byte short int long&hellip;..
引用:
数组：
数组的定义
使用
内存图
异常
遍历
求和
查找
评委打分
二维数组： 循环的嵌套
类
接口</p>
<p>​			类型转换
​				隐式
​				强制
​	符号
​		基本符号  (){}[].&quot;&quot;''; 
​			():
​				强制类型
​				运算
​				结构语句
​				方法
​				
​		运算符：
​			算术
​			赋值
​			比较
​			逻辑
​			三元
​			位 
逻辑语句：
​	顺序结构
​	选择结构 ifswitch
​	循环结构 for while dowhile break continue 猜数字小游戏</p>
<p>方法：
基本使用
参数
返回值
重载 
参数的传递</p>
<p>​</p>
<p>jre核心类库的类：
Scanner 
Random 
String
StringBuilder
ArrayList</p>
<p>学生管理系统。</p>
<h2 id="面向对象思想">面向对象思想：</h2>
<p>java的为什么火：
面向对象语言
开源
跨平台</p>
<p>面向过程：
其实就是 面向的这个过程。
生活案例：洗衣服这个过程，  把衣服扔到盆里 &ndash;放上水泡上&ndash;放洗衣液&ndash;揉洗 &ndash;拧干&ndash;涮一遍&ndash;拧干&ndash;晾干
程序中  ：如果洗衣服这个过程类比到代码中，这个过程的每一行代码 都需要你自己去写。</p>
<p>面向对象 ：
你面向的不再是过程了， 而是面向的是这个对象。
生活案例：你不需要面向洗衣机这个过程了， 你找一个洗衣机过来，  把洗衣放到洗衣机里面去(把衣服扔到盆里 &ndash;放上水泡上&ndash;放洗衣液&ndash;揉洗 &ndash;拧干&ndash;涮一遍&ndash;拧干&ndash;晾干);
现在你发现 面向的不是那个洗衣服的过程了吧， 你面向的是洗衣机啦。  我们只需要他去做事情就可以啦。
程序中： 洗衣服的这个过程 你不需要去写啦。 你只需要写一行  调用洗衣服的代码就可以啦。</p>
<p>​	疑问：
​		问题： 洗衣机拿来的呢？ 你不要还是要去写 洗衣机里面这个过程的代码吗？
​		回到现实生活中：
​			如果你去洗衣服， 请问 您去造一个一洗衣机吗？？ 会吗？？
​			你有三种方式来指挥洗衣机帮你去做事情：
​			1：自己造一个。
​			2：你家里面本身就有一个洗衣机。
​			3：你买一个洗衣机 来洗衣服。</p>
<p>​		回到代码中：
​			你也有三种方式 调用洗衣机
​			1：你也去自己造一个， 自己手写 洗衣机洗衣服的这个过程。
​			2：jdk包括 jre  里面包括一个 核心类库，  jre的核心类库里面就提供了大量的类似于洗衣机的这样的类， 你直接调用就可以啦。
​			3：其实市面上有很多的 软件公司  生产类似于洗衣机这样 代码。  你只需要从他们买过来代码 放到你自己的程序中， 直接调用就可以啦。
​		所以今天学学自己怎么去定义 一个类似于洗衣机这种的东西：</p>
<p>回到代码中：
你也有三种方式 调用洗衣机
1：你也去自己造一个， 自己手写 洗衣机洗衣服的这个过程。
2：jdk包括 jre  里面包括一个 核心类库，  jre的核心类库里面就提供了大量的类似于洗衣机的这样的类， 你直接调用就可以啦。
3：其实市面上有很多的 软件公司  生产类似于洗衣机这样 代码。  你只需要从他们买过来代码 放到你自己的程序中， 直接调用就可以啦。
所以今天学学自己怎么去定义 一个类似于洗衣机这种的东西：</p>
<p>类： 类 是对 这种事物类型的描述。
对象： 真正让洗衣机工作的时候， 我们需要通过对 洗衣机的描述  去内存中创建出一个实实在在的洗衣机。</p>
<h3 id="面向对象的作用">面向对象的作用：</h3>
<p>​			其实面向对象， 代码去执行的过程， 也是基于面向过程的，所以面向对象根本不会提高程序的执行效率，甚至有一丁点的 减低了程序的执行效率。
​			因为多了一步调用的过程。
​			他提高了我们开发人员的开发效率。
​			c语言是 世界上最快的语言，c语言是面向过程语言。</p>
<h2 id="类和对象">类和对象(☆☆☆☆☆)：</h2>
<p>类：一类事物的设计图 模板
属性： 变量去表示
功能： 方法去表示</p>
<p>​		对象： 是这一类事物中 的一个具体的存在。</p>
<p>案例1：定义学生类 创建学生对象</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 模板  设计图
</span><span class="c1"></span>			<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
				<span class="c1">// 类是模板， 是对事物的描述
</span><span class="c1"></span>				<span class="c1">// 事物应该具备  属性(学生的那些值) 行为
</span><span class="c1"></span>
				<span class="c1">// 属性 ： 成员变量 （类中方法外面）
</span><span class="c1"></span>				<span class="c1">// 行为 ： 比较复杂的顺序 逻辑 ... 应该是一系列的语句来组成，  所以我们把这些语句写在方法内，  行为用方法来表示。
</span><span class="c1"></span>
				<span class="c1">//System.out.println(&#34;sdf&#34;);
</span><span class="c1"></span>
				<span class="c1">// 属性： 年龄  30  20  25 ....
</span><span class="c1"></span>				<span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
				<span class="c1">// 属性： 姓名    &#34;张三&#34;  &#34;李四&#34;
</span><span class="c1"></span>				<span class="n">String</span> <span class="n">name</span><span class="o">;</span>

				<span class="c1">// 行为  学习 吃饭
</span><span class="c1"></span>				<span class="kd">public</span> <span class="kt">void</span> <span class="nf">study</span><span class="o">(){</span>
					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;学生学习&#34;</span><span class="o">);</span>
				<span class="o">}</span>
				<span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">(){</span>
					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;学生吃饭&#34;</span><span class="o">);</span>
				<span class="o">}</span>

				<span class="c1">// 行为 帮老师去买冰糕
</span><span class="c1"></span>				<span class="kd">public</span> <span class="kt">char</span> <span class="nf">buyBingGao</span><span class="o">(</span><span class="kt">int</span> <span class="n">money</span><span class="o">){</span>
					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;用&#34;</span><span class="o">+</span><span class="n">money</span><span class="o">+</span><span class="s">&#34;元 去买了一根冰糕&#34;</span><span class="o">);</span>
					<span class="k">return</span> <span class="sc">&#39;糕&#39;</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo1</span> <span class="o">{</span>
				<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
					<span class="c1">// 根据Student 这个设计图   创建一个具体的 学生。
</span><span class="c1"></span>					<span class="c1">// 创建对象
</span><span class="c1"></span>					<span class="c1">// 格式
</span><span class="c1"></span>					<span class="c1">// 类名 对象名 = new 类名();
</span><span class="c1"></span>
					<span class="n">Student</span> <span class="n">stu</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Student</span><span class="o">();</span>
					<span class="c1">// stu 就是那个实实在在的对象。
</span><span class="c1"></span>
					<span class="c1">// 指挥对象 做事情。
</span><span class="c1"></span>					<span class="c1">// 对象名.属性名
</span><span class="c1"></span>					<span class="c1">// 对象名.方法()
</span><span class="c1"></span>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu</span><span class="o">.</span><span class="na">age</span><span class="o">);</span>
					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>

					<span class="n">stu</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">23</span><span class="o">;</span>
					<span class="n">stu</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="s">&#34;张三&#34;</span><span class="o">;</span>

					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu</span><span class="o">.</span><span class="na">age</span><span class="o">);</span>
					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>

					<span class="n">stu</span><span class="o">.</span><span class="na">study</span><span class="o">();</span>
					<span class="n">stu</span><span class="o">.</span><span class="na">eat</span><span class="o">();</span>
					<span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">stu</span><span class="o">.</span><span class="na">buyBingGao</span><span class="o">(</span><span class="n">10</span><span class="o">);</span>
					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;我作为老师就拿到了你给我买的&#34;</span><span class="o">+</span><span class="n">c</span><span class="o">);</span>

					<span class="c1">//----------------------------------
</span><span class="c1"></span>					<span class="c1">//Random // 这是jre核心类库里面提供的一个类。
</span><span class="c1"></span>
					<span class="n">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
					<span class="kt">int</span> <span class="n">anInt</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>

				<span class="o">}</span>
			<span class="o">}</span>

</code></pre></div><p>​	案例2：定义一个手机类， 并且创建手机对象并使用
​		手机的属性有：品牌 价格 颜色
​		手机的行为有： 打电话发短信</p>
<pre><code>
class Phone {
String brand;
double price;
String color;

public void call(){
System.out.println(&quot;打电话&quot;);
}
public void sendMessege(){
System.out.println(&quot;发短信&quot;);
}
}

class Demo {
public static void main(String[] args){
Phone ph  = new Phone();

System.out.println(ph.brand); //null
System.out.println(ph.price); //0.0
System.out.println(ph.color); //null

ph.brand = &quot;apple&quot;;
ph.price = 9999.9;
ph.color = &quot;炫酷紫&quot;

System.out.println(ph.brand); //apple
System.out.println(ph.price); //9999.9
System.out.println(ph.color); //炫酷紫

ph.call(); // 打电话
ph.sendMessege();// 发短信
}
}
</code></pre><p>​	内存图(☆☆☆):</p>
<p>一个对象的内存图：
方法区  是用来存储 类的 字节码文件的， 就是代码的存储位置。
堆内存  用来存储 对象的数据的。
栈内存  代码一句一句的执行 在栈里面发生的， 栈里面是以方法为单位。</p>
<pre><code>        类的代码存储在 方法区中的。
        对象 是创建在 堆内存中的，  我们给对象中的属性赋值， 是赋值到堆内存中的。
			
            class Demo {
                public static void main(String[] args){
                    Phone ph  = new Phone();
                    System.out.println(ph);  // 地址 
                }
            }
</code></pre>
<p>​	两个对象的内存图：</p>
<p>类的字节码文件， 只有第一次使用到的时候， 加载一次， 以后再执行到的时候 就不再加载了。
类的字节码文件在 方法区的存储，是跟着jvm的， 只要jvm不停止， 方法区里面的东西就不会停止。</p>
<pre><code>引用类型的数据 每new一次 就是要在堆内存开辟新的空间。

class Demo {
public static void main(String[] args){
Phone ph  = new Phone();
ph.brand = &quot;大米&quot;;
System.out.println(ph.brand); //大米

Phone ph1  = new Phone();
ph1.brand = &quot;长粒米&quot;;
System.out.println(ph.brand); // 大米
}
}
</code></pre>
<p>两个变量指向同一个对象的内存图：
可以多个变量同时去操作 一个对象(堆内存中的)， 只要其中一个通过变量去变量 对象里面的内容，第二变量再去使用对象里面的内容的时候 就已经发生改变了。</p>
<pre><code>Student s = new Student();
s.name = &quot;张三&quot;;
Student stu = s;
stu.name = &quot;李四&quot;;
System.out.println(s.name + stu.name); // 李四李四
</code></pre><p>当一个应用类型变量 不指向堆内存中任何内容了， 这时候再通过这个变量去访问内容 就会报空指针异常</p>
<pre><code>Studnet stu = null;
System.out.println(stu.name);  // 空指针异常
</code></pre><p>垃圾回收：
栈内存：方法被调用 就会在栈内存存在， 
方法执行结束之后，从栈内存中消失了，包括里面的 变量 以及基本类型的数据值 都消失了。</p>
<p>堆内存：当指向这个堆内存中的对象的 所有的变量 都消失了的时候。
这时候 这个对象 就会变成内存垃圾，但是并不会立刻消失。
而是 java底层有一个垃圾回收机制 定时轮训 每隔一段时间就去检测垃圾，并且回收垃圾。</p>
<p>方法区：方法区中的内容， 只要jvm不关闭，任何时候都不消失。</p>
<pre><code>class Demo {
public static void main(String[] args){
show();
System.out.println(&quot;main方法不结束了&quot;);
}
public static void show(){
int a = 10;
Student s = new Student();

}
}

</code></pre><h3 id="成员变量和局部变量的区别">成员变量和局部变量的区别(☆☆☆)：</h3>
<pre><code>书写位置：
成员：类中方法外面
局部：方法内部
// 类是java写代码的最基本单位，就是说你无论写什么代码 都必须写在类中。
//int c = 30;
class Phone {
int price; // 成员变量
public void show(){
int a=10;  // 局部变量
System.out.println(a);
}
}
</code></pre><p>内存位置：
成员： 堆内存中  （存在对象里面 而对象在堆内存中）
局部： 栈内存中。</p>
<p>声明周期：
成员： 随着对象的创建而存在， 随着对象的消失而消失
局部： 随着方法的调用 执行到定义变量的代码的时候，存在，  方法执行结束就立刻消失。</p>
<p>初始化：
成员： 有默认值，所以使用之前不需要赋值。
局部： 使用之前必须先赋值， 因为他没有默认值的。</p>
<h3 id="private-">private (☆☆☆☆☆)：</h3>
<p>​	private修饰 成员，   被private修饰的成员 不能在类的外部直接访问的。 只能在类内部访问</p>
<pre><code>public class Student {
private int age;
private String name;

public int getAge() {
return age;
}

public void setAge(int a) {
age = a;
}

public String getName() {
return name;
}

public void setName(String n) {
name = n;
}
}
public class Demo {
public static void main(String[] args){
Student s = new Student();
//s.age = 10;
s.setAge(10);
int a = s.getAge();
System.out.println(a);

}
}

</code></pre><h3 id="this">this(☆☆☆☆☆)</h3>
<pre><code>就近原则：
public class Student {
int a;  // 堆内存中
public void show(){
int a = 10;  // 不会报错
// 之前学的变量的注意事项： 同一个范围内 不能定义相同名字的变量。
// 矛盾解释如下 注释
System.out.println(a);
}
}
</code></pre><pre><code>// 之前学的变量的注意事项： 同一个范围内 不能定义相同名字的变量。
class Demo{
public static void main(String[] args){
int a = 10;
//int a = 10;  //报错。
if (true){
//int a =10;  //报错。
System.out.println(a);
}
}
}
// 之前是这么理解的， 但是之前我们遇到的所有的变量 都是在栈内存中的，
*/

class Demo {
public static void main(String[] args){
Student s = new Student();
s.show(); // 10    就近原则。  
}
}
</code></pre><pre><code>
this区分成员变量和局部变量，如果我就是想 用成员位置的遍历。
public class Student {
int a;  
public void show(){
int a = 10;  
System.out.println(this.a);
}
}
class Demo {
public static void main(String[] args){
Student s = new Student();
s.show(); // 0 
}
}

</code></pre><p>this 的实质： 谁来调用包含this的这个方法， this就指的是谁。</p>
<pre><code>public class Phone {
public void show(){
System.out.println(this);
}
}
class Demo {
public static void main(String[] args){
Phone p = new Phone();
System.out.println(p); // 0x001
p.show(); // 0x001

Phone p1 = new Phone();
System.out.println(p1); // 0x002
p1.show(); // 0x002

//Cat c = new Cat();
//c.show();  报错
}
}
</code></pre><h3 id="封装-面向对象的三大特征--封装--继承--多态">封装 ：面向对象的三大特征  封装  继承  多态</h3>
<p>​		1：提高安全性  private 
​		2：提高复用性  方法
​		3：数据打包一起  JavaBean类</p>
<pre><code>
类： class 类名 { }   根据类 使用场景来划分 能分为三种类
工具类： 定义 大量的方法(功能)  没有什么属性
public class Utils {
public void show(){

}
public void method(){

}

public void function(){

}
}
</code></pre><pre><code>测试类：能够运行的 （包含main方法的类）
public class Demo {
public static void main(String[] args){
int a = 10;
System.out.println(a);
}
}

public class Demo1 {
@Test
public void show(){

}
}
</code></pre><p>​	JavaBean类： 他里面 只有属性(并且包含 属性的输入口和出口 set/get)</p>
<pre><code>public class Student {
private int age;
private String name;

public int getAge() {
return age;
}

public void setAge(int age) {
this.age = age;
}

public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}
}
public class Demo {
public static void main(String[] args){
int age =10;
String name = &quot;张三&quot;;

//int[] arr = {age,name};
//String[] strs = {age, name};

Student s = new Student();
s.setAge( age);
s.setName(name);
}
}

</code></pre><pre><code>					
	构造方法：
		定义格式：
			1：必须和类名相同
			2：不能有返回值类型 void也不能有
			3：不能写返回值  （但是可以单独写一个 return ， 目的是为了强制终止构造方法）
		
		调用：
			构造方法的作用是创建对象， 只能使用new 调用， 用来创建对象。
			不能使用对象去调用。
			class Student{
				public Student(){
					System.out.println(&quot;构造方法执行&quot;);
				}
			}
			class  Demo {
				public static void main(String[] args){
					Studnet s  = new Student(); // 构造方法执行
					Student s1 = new Student(); // 构造方法执行
					//s.Student(); // 编译报错 
				}
			}
</code></pre><pre><code>//-----------------------------------------
class Phone{
public Phone(){
System.out.println(&quot;Phone构造方法执行&quot;);
}
public void Phone( ){ // 这个方法 就相当于 一个 普通类似举例那种 show方法。 只不过名字 我不叫show了  叫Phone
System.out.println(&quot;这是一个普通方法 名字叫Phone（恰好方法名和类名相同了 你管得着吗） 不是构造方法&quot;);
}
public void show(){
System.out.println(&quot;这是一个普通方法 名字叫show 不是构造方法&quot;);
}
}
class  Demo {
public static void main(String[] args){
Phone s  = new Phone(); // Phone构造方法执行
Phone s1  = new Phone(); // Phone构造方法执行
s.Phone();  // 可以 正确  但是 Phone() 这不是构造方法了。
s.show();
}
}

</code></pre><p>注意事项：
1：构造方法 顾名思义 &ldquo;构造&rdquo;  也就是说 这个方法是为了创建对象而存在的，换句话说， 如果一个类中没有构造方法 那么这个类创建不了对象。</p>
<pre><code>public class Student {
/*
如果一个类中 没有手动写出构造方法
那么系统 会提供给你一个 构造方法
public Student(){

}

手动写出构造方法之后
系统就不再提供了
*/

public Student(){
System.out.println(&quot;sdfsdf&quot;);
}

}
public class Demo {
public static void main(String[] args) {
Student s = new Student();
// 然而 这个类却能创建对象
// 说明这个类中有构造方法。
System.out.println(s);
}
}
</code></pre><p>​	2：构造方法可以重载</p>
<pre><code>public class Phone {
/*
构造方法 是不是属于方法。
方法的重载
构造方法也必然存在着重载这种现象
方法名名相同 参数列表必须不同
*/
/*public Phone(){
System.out.println(&quot;没有参数的构造方法--无参构造&quot;);
}*/
public Phone(int a){
System.out.println(&quot;有参数的构造方法--有参构造&quot;);
}

/*
如果我们没有手动写出构造方法
系统将会默认提供一个 无参数的构造方法
public Phone(){ }

如果我要手动给出了 系统就不再提供了。
*/

}
public class Demo1 {
public static void main(String[] args) {
//Phone p = new Phone(); //编译报错

Phone p1 = new Phone(10);

}
}

</code></pre><p>3：构造方法作用， 在创建对象的时候 顺便给 属性赋值</p>
<pre><code>public class Car {
private String brand;
private int price;

public Car(){

}

public Car(String brand, int price){
this.brand = brand;
this.price = price;
}

public void setBrand(String brand) {
this.brand = brand;
}

public void setPrice(int price) {
this.price = price;
}

public int getPrice() {
return price;
}

public String getBrand() {
return brand;
}
}
</code></pre><pre><code>public class Demo2 {
					public static void main(String[] args) {
						// 构造方法是创建对象而生的。
						// 系统给一个 我也能创建对象， 你给了也能用你的 ， 有什么区别吗？

						Car c = new Car();
						c.setBrand(&quot;宝驴&quot;);
						c.setPrice(199);
						//这就是我们创建一个 汽车对象 并把他的属性 弄好的。
						// 三句话。 你用了三条语句。

						// 我觉得三条语句有点麻烦，
						//以后万一 他有1万个属性呢 你需要写1万01条语句

						// 那能不能 一条语句结束呢
						// 无论你想用几条语句 你必须得有创建对象的那条语句。
						// 那我就在想 能不能在创建对象的时候 就给我赋值呢？？

						Car c1 = new Car(&quot;奔马&quot;,299);
						System.out.println(c1.getBrand());
						System.out.println(c1.getPrice());

						// 你有了 有参构造之后 你还要 set方法干嘛啊？
						// 反正 构造方法可以赋值。

						// 你不想要set了
						// 你要充分了解一下 set方法的作用。
						//1:赋值
						// 2: 需求： 刚才那个 奔马 这个名字 我好像起错了 应该是 奔驹

						// 假设此时 没有set方法。

						//c1 = new Car(&quot;奔驹&quot;,299);  //  你要这么做 就是把之前的那个车 报废掉。 重新造一辆车 九尾了改个名字

						//set方法
						c1.setBrand(&quot;奔驹&quot;);

					}
				}
</code></pre><p><strong>标准的JavaBean类几部分：
属性全部private
无参构造方法
有参构造方法
set/get方法</strong></p>
]]></content>
		</item>
		
		<item>
			<title>Day06  Debug工具和进制</title>
			<link>https://demon-github1996.github.io/posts/day06/</link>
			<pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
			
			<guid>https://demon-github1996.github.io/posts/day06/</guid>
			<description>Debug工具和进制 java的语法： 程序的基本组成 注释 关键字 标识符 数据 常量 变量 数据类型 基本 应用 数组 二维数组 类 接口 类型转换 隐式 强制 byte a = (byte)200;
​	符号： ​	基本符号 ​	运算符 ​	算术 ​	赋值 ​	关系 ​	逻辑 ​	三元 ​	位 结构语句： ​	顺序 ​	选择 ifswitch ​	循环 forwhiledowhile break continue
方法： 基本 参数 返回值 注意事项 重载 参数的传递 案例：引用类型的值传递
jre核心类库提供的类： Scanner Random
debug 工具 (☆☆☆☆☆) debug ： 详细查看程序的执行步骤 1：加断点 ， 一般 在你要查看的程序的第一行， 左侧点一下。 2：右键 debug 程序 （不再是run） 3：左下侧 是栈， 表示现在有多少个方法进栈了， 正在执行哪个方法的哪一行。 右下侧 是方法里面的变量值。 4：下一步 F7 即可 5： 如果查看程序 查看到中间，不想看后面的了， 停止程序。 按 ctrl + F2 （红色方框按钮）</description>
			<content type="html"><![CDATA[<h1 id="debug工具和进制">Debug工具和进制</h1>
<p><code>java的语法：</code>
<code>程序的基本组成</code>
<code>注释</code>
<code>关键字</code>
<code>标识符</code>
<code>数据</code>
<code>常量</code>
<code>变量</code>
<code>数据类型</code>
<code>基本</code>
<code>应用</code>
<code>数组</code> 
<code>二维数组</code>
<code>类</code>
<code>接口</code>
<code>类型转换</code>
<code>隐式</code>
<code>强制</code>
<code>byte a = (byte)200;</code></p>
<p>​	<code>符号：</code>
​		<code>基本符号</code>
​		<code>运算符</code>
​			<code>算术</code>
​			<code>赋值</code>
​			<code>关系</code>
​			<code>逻辑</code>
​			<code>三元</code>
​			<code>位</code>
<code>结构语句：</code>
​	<code>顺序</code>
​	<code>选择 ifswitch</code>
​	<code>循环 forwhiledowhile break continue</code></p>
<p><code>方法：</code>
<code>基本</code>
<code>参数</code>
<code>返回值</code>
<code>注意事项</code>
<code>重载</code>
<code>参数的传递</code>
<code>案例：引用类型的值传递</code></p>
<p><code>jre核心类库提供的类：</code>
<code>Scanner</code>
<code>Random</code></p>
<h1 id="debug-工具-">debug 工具 (☆☆☆☆☆)</h1>
<p>debug ： 详细查看程序的执行步骤
1：加断点 ， 一般 在你要查看的程序的第一行， 左侧点一下。
2：右键  debug 程序 （不再是run）
3：左下侧 是栈， 表示现在有多少个方法进栈了， 正在执行哪个方法的哪一行。
右下侧  是方法里面的变量值。
4：下一步  F7 即可
5： 如果查看程序 查看到中间，不想看后面的了， 停止程序。
按 ctrl + F2  （红色方框按钮）</p>
<p>​		6：如果查看代码  中间有一些代码 不想看了， 相看这些代码后面的代码。
​			这是你就在后面的代码上 加一个断点， 
​			按 F9 （绿色三角按钮）跳到下一个断点。
​			如果没有下一个断点， 程序就会立即执行完毕。
​			或者 alt+f9 （他需要有光标的配合， 跳到下一个光标位置）
​		7：程序结束之后 想把断点取消掉
​			如果断点少的话， 再点一下 断点的符号即可。
​			如果断点多的话。 ctrl+ shift + f8 （红色双原按钮）</p>
<h2 id="debug-查看循环的执行流程">debug 查看循环的执行流程：</h2>
<p>for (初始化语句; 条件表达式 ; 条件控制语句 ){
语句体;
}</p>
<p>​		如果你想清楚的看到一些代码的执行顺序， 尽量把代码分成不同的行， 否则 debug就会把他当做一行代码去执行了。
​		int[] arr = {4,5,6,7,8};
​		for (int i = 0;
​			 i &lt; arr.length;
​			 i++) {
​			System.out.println(arr[i]);
​		}</p>
<h3 id="debug的快捷键">debug的快捷键：</h3>
<p>1： F8  ：step over  下一步下一步， 当遇到调用方法， 直接把方法当做一句话执行完毕，不会进入方法
2： F7 ： step into 也是下一步的意思，但是当遇到 “自已定义的方法” 就会进入方法，把方法执行完毕之后，再回调用处继续执行。
3： alt+shift+F7   也是下一步的意思，当他遇到“源码的方法和自己定义的方法” 就会进入方法，把方法执行完毕之后，再回调用处继续执行。
4： shift+ F8  跳出方法。当进入了方法之后，不想再继续看方法里面下一步下一步怎么执行了， 想跳出方法，就按此键。
5： 想要查看表达式的结果，就可以选中表达式，右键 点击 add to watches
6： alt+ F8  如果运行过程中，你想临时的去修改一些 变量的值。你可以使用
此功能修改。 改完之后，点击 Evaluate就可以了。</p>
<h1 id="进制">进制(☆)</h1>
<p>进制的概述：
逢几进1 ， 就是几进制。 常见 十进制 二进制 八进制 十六进制。</p>
<pre><code>System.out.println(100); // 十进制
System.out.println(0b10); // binary二进制    2
System.out.println(010); // Octal八进制    8
System.out.println(0x10); // hex 十六进制    16  
</code></pre>
<h2 id="进制之间的转换">进制之间的转换：</h2>
<p>进制之间的转换：
其他进制转换为十进制：
十进制&ndash;&gt; 十进制
999 = 9<em>10^2 + 9</em>10^1 + 9*10^0;</p>
<p>​			其他进制 &ndash;&gt; 十进制
​				0b100 = 1<em>2^2 + 0</em>2^1 + 0^2^0;  =4</p>
<p>​			二进制转换为十进制&mdash;简化方法 8421码
​				11111111 = 128+64+32+16+8+4+2+1 =  255
​				&hellip;..</p>
<p>十进制转换其他进制
除以基 倒取余</p>
<pre><code>    其他进制和其他进制的转换：
        二进制 ：1111 1111
</code></pre>
<p>​			八进制： 2的3次方  011 111 111  &mdash; 377</p>
<p>​			十六进制： 2的4次方。  1111 1111 &ndash; FF</p>
<p>​			这就是八进制和十六进制的由来。
​				写程序的时候 我们只需要考虑十进制的
​				计算机计算的时候 用 二进制。
​				研究计算机的科学家(人)  也要使用二进制运算。  10101010101010101010101010101010</p>
<p>​	案例练习：</p>
<pre><code>// 二进制
// 101010  --- 十进制  32+8+2 = 42
// 101010  --- 八进制  101 010 = 52
// 101010  --- 十六进制  0010 1010 = 2a

// 十六进制 6c  --&gt; 二进制  1101100
// 十进制 70  --&gt; 二进制 64 4 2 ----  1000110
// 十进制 70   
//         1   1   1  1 1 1
//	       64  32  16 8 4 2
</code></pre><h1 id="原码反码补码">原码反码补码(☆☆)</h1>
<p>二进制： 计算机中 电子 电阻和电容。  1 0  最底层用二进制来表示的。</p>
<pre><code>十进制的 10  --  二进制 1010
十进制的 -10  --- 负数怎么表示   -1010 ？？  
计算机表示 负10 是绝对不会在二进制的前面加负号的， 因为计算机里面只有01 

数据类型：
byte  1个字节 8个位
short 2个字节 16个位
int   4个字节 32位。

正号和符号：必须要结合着 数据类型的 最高位来去表示。
数据类型的里面 最高位 0不表示正号 1表示负号。

假设 10 和 -10 都是byte类型的。

正10	0000 1010
负10    1000 1010

byte  -128 到 127	
1111 1111   -127
1000 0000    -128
0000 0000     0
0111 1111    127

数据以后使用来计算的。
现在咱们来看  两个 正10相加 得到 正20吗？
0000 1010
0000 1010
--------------
0001 0100  ----  正20

继续发现问题 如果 一个正10 加上一个 负10 会得到0吗？
0000 1010
1000 1010
-------------
1001 0100 ----- 负20

所以得到了结论， 负数的表示 不能只用高位是1 
那还能怎么表示呢？
0000 1010   --- +10  这个是正10的源码。

1111 0101	--- 反码	

1111 1111  
+			1
----------------
10000 0000  --- 0


1111 0101 
+			1
---------------
1111 0110	-10   这才是计算机真实底层保存的那个 -10

1000 1010 -- 原码 ---原码就是 把-10 直接按照二进制翻译为2进制的数据然后高位变1
1111 0101 -- 反码 ---反码就是因中间推导的过程而得名 高位不变 其他位取反。
1111 0110 -- 补码 ---补码才是负数在计算机中真实存储的数据，然后人为无法直接通过转换二进制计算出来，所以需要用过原码反码的过程推导出来。
</code></pre>
<p>​</p>
<pre><code>案例1：
byte b = (byte)(100+110);
System.out.println(b);

100+110 这个过程如下：
00000000 00000000 00000000 01100100
00000000 00000000 00000000 01101110
-------------------------------------------
00000000 00000000 00000000 11010010    

(byte)210 的过程如下
00000000 00000000 00000000 11010010
11010010   ---  高位是1 这是负数的补码

-      1
-------------
11010001   --- 反码
---------
10101110  ---  原码   翻译为 10进制  -46
案例2：
byte a = (byte)40;
System.out.println(a); //40 

40---- 00000000 00000000 00000000  00101000  
(byte)40  --- 00101000    
--- 40 
</code></pre>
<h1 id="位运算">位运算(☆☆☆)</h1>
<p>&amp; | ~ ^ 
和逻辑运算符的运算规则是一样的 只不过他运算的是1和0
你就把 1当做true  把0当做false  然后进行逻辑运算。</p>
<pre><code>
^ : 异或  是否不同，   不同为true 1  相同为false  0

特点：一个数 对另一数异或两次 自身不变。
int a = 10^20^20;
System.out.println(a);

int b = 10^20;
System.out.println(b);
int c = b^20;
System.out.println(c); //10
int d = b^10;
System.out.println(d); //20

int e = 10^20^10;
System.out.println(e); //20



int a = 10^ 20 ^ 20;
//int a = 10^(20^20); 

00010100    ---20
^ 00010100    ---20
--------------------
00000000    ----0

00001010
^ 00000000 
-------------
00001010    ---10

</code></pre><pre><code>
两个数交换(☆☆☆☆☆)
int a = 10;
int b = 20;

方法1：
int temp = a;
a = b;
b = temp;

方法2：
a = a^b; // 10^20
b = a^b; // 10^20^20 =10
a = a^b; // 10^20^10 = 20


int c = 10;
int d = 10;
//请交换 c和d
c = c^d; // 10^10 =0
d = c^d; // 0^10 = 10
c = c^d; // 0^10 = 10


方法3：
a = a+b; // 10+20
b = a-b; // 10+20-20 = 10
a = a-b; // 10+20-10 = 20

方法4：
a = a*b;
b = a/b;
a = a/b;

</code></pre><h2 id="-左移-">&laquo; 左移 ：(☆☆☆☆)</h2>
<pre><code>

100 &lt;&lt;2

00000000 00000000 00000000 01100100
__000000 00000000 00000000 0110010000      400 =100*4


-100 &lt;&lt; 2
10000000 00000000 00000000 01100100  这是-100的原码
11111111 11111111 11111111 10011011  反码
11111111 11111111 11111111 10011100  补码   从此处进行位运算
__111111 11111111 11111111 1001110000  补码
__111111 11111111 11111111 1001101111  反码
__100000 00000000 00000000 0110010000  原码   -400   = -100 *4

</code></pre><h2 id="-有符号右移">&raquo; 有符号右移(☆☆☆☆)：</h2>
<pre><code>100 &gt;&gt;2

00000000 00000000 00000000 01100100
0000000000 00000000 00000000 011001__   25 =  100/4

-100 &gt;&gt; 2
0000000 00000000 00000000 01100100  这是-100的原码
11111111 11111111 11111111 10011011  反码
11111111 11111111 11111111 10011100  补码   从此处进行位运算
1111111111 11111111 11111111 100111__ 补码
1111111111 11111111 11111111 100110__ 反码
1000000000 00000000 00000000 011001__ 原码  -25 = -100/4
</code></pre><h2 id="-无符号右移">&raquo;&gt; 无符号右移(☆☆☆)。</h2>
<pre><code>100 &gt;&gt;&gt;2

00000000 00000000 00000000 01100100
0000000000 00000000 00000000 011001__   25 =  100/4

-100 &gt;&gt;&gt; 2	
0000000 00000000 00000000 01100100  这是-100的原码
11111111 11111111 11111111 10011011  反码
11111111 11111111 11111111 10011100  补码   从此处进行位运算
0011111111 11111111 11111111 100111__  正数 不区分原反补

</code></pre><h1 id="数组的反转">数组的反转：</h1>
<pre><code>需求：
int[] arr = {5,8,2,4,6};
// {6,4,2,8,5} 

// 第一  不是让你倒着打印
// 第二 也不让你新建一个新数组
// 而是让你把现有的这个数 里面的元素 倒过来。

for (int start = 0, end = arr.length-1 ; start&lt; end  ;start++, end--  ){
int temp = arr[start];
arr[start] = arr[end];
arr[end] = temp;
}

//------------------------- 
// 下面是贤哥教的第二种反转的方法
int[] arr = {5,8,2,4,6}
for (int i = 0;i&lt;arr.length/2;i++){
int temp = arr[i];
arr[i] = arr[arr.length-1-i];
arr[arr.length-1-i] = temp;
}
</code></pre><h1 id="二维数组">二维数组(☆☆)</h1>
<p>二维数组的由来：
数据类型：
基本类型： byte short int long char boolean float double
引用类型:
数组</p>
<pre><code>定义格式：
数据类型[] 变量名 = new 数据类型[数组长度];

int[] arr = new int[3];
byte[] brr = new byte[3];

引用类型数组：类属于引用类型 属于数据类型 符合 数组的定义格式的。
Random r = new Random();
Random r1 = new Random();
Random r2 = new Random();

Random[] rr = new Random[3];
rr[0] = r;
rr[1] = r1;
rr[2] = r2;

</code></pre><pre><code>引用类型数组： 数组是属于引用类型 属于数据类型 也符合 数组的定义格式啊。
int[][] arr = new int[2][3];  //  大数组里面 有两个小数组， 每个小数组 存3个元素

int[] a0 = new int[3];
int[] a1 = new int[3];

arr[0] = a0;
arr[1] = a1;


int[][] brr = {{3,4,5},{5,6,7},{8,9,2}};

int[][] brr = {{3},{5,6,7},{8,9,2,5,6,8,6}};


--------------------------
int[][][] arr = new int[2][3][4];  // 大数组里面存 2个中数组  每个中数组里面存3个小数组， 每个小数组里面存4个元素。

--------------------------
依次类推 四维数组 五维数组 六维数组.....

类:
Scanner  Random 
</code></pre><pre><code>
二维数组的创建：
1：
int[][] arr = new int[4][5];

arr[0] = new int[]{1,2,3,4,5};

arr[1] = new int[5];

int[] a = new int[5];
arr[2] = a;

arr[3][0] = 10;
arr[3][1] = 20;
arr[3][2] = 30;
arr[3][3] = 40;
arr[3][4] = 50;

System.out.println(arr[0][0]); //1

注意事项：
int[][] arr = new int[2][3];
arr[0] = new int[8];
arr[1] = new int[10]; // 虽然 二维数组定义规定了每一个一维数组里面是3个元素，但是 无论多个元素的一维数组都是可以赋值的。

// 虽然是直接赋值一维数组是可以的，但是 直接给一维数组赋值元素是不能超出范围的。
int[][] brr = new int[2][3];
brr[0][10]  = 20; //索引越界异常

2：
int[][] arr = {{1,2,3},{4,5,6,7,8},{9,1,2,3,5,6,4,8}};

int[] a = {3,4,5,6,7,8,9};
int[] b = {4,6,7,4,9};
int[][] brr = {a,b};

二维数组的遍历：循环嵌套(☆☆☆☆)
// 遍历： 把容器中每一个元素 一一展示出来。

/*int[][] arr = new int[3][4];

arr[0][1] = 10;

arr[1][1] = 20;

arr[2][1] = 30;*/
int[][] arr = {{1,2,3},{6,7,8,5,6,8},{3,4,5,6,7,8,9}};

/*
// 第一个一维数组 arr[0]
for (int i = 0; i &lt; arr[0].length; i++) {
System.out.println(arr[0][i]);
}
System.out.println(&quot;----------&quot;);
// 第二个一位数组  arr[1]
for (int i = 0; i &lt; arr[1].length; i++) {
System.out.println(arr[1][i]);
}
System.out.println(&quot;----------&quot;);
// 第三个一位数组  arr[2]
for (int i = 0; i &lt; arr[2].length; i++) {
System.out.println(arr[2][i]);
}
*/

for (int j = 0; j &lt; arr.length; j++) {
for (int i = 0; i &lt; arr[j].length; i++) {
System.out.print(arr[j][i]+&quot; &quot;);
}
System.out.println();
}

案例1：二维数组的求和
int[][] arr = {{1,2,3},{6,7,8,5,6,8},{3,4,5,6,7,8,9}};

int sum =0;
for (int j = 0; j &lt; arr.length; j++) {
for (int i = 0; i &lt; arr[j].length; i++) {
sum+=arr[j][i];
}
}
System.out.println(sum);

案例2：二维数组的求总和打印出来，  每个一维数组的和 打印出来。
int sum = 0;
for (int j = 0; j &lt; arrs.length; j++) {
int sumArr = 0;
for (int i = 0; i &lt; arrs[j].length; i++) {  //遍历一维数组
sum += arrs[j][i];
sumArr+=arrs[j][i];
}
System.out.println(&quot;第&quot;+j+&quot;个一位数组的和是：&quot;+sumArr);

}
System.out.println(&quot;总和是：&quot;+sum);






</code></pre>]]></content>
		</item>
		
		<item>
			<title>Day05 方法</title>
			<link>https://demon-github1996.github.io/posts/day05/</link>
			<pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate>
			
			<guid>https://demon-github1996.github.io/posts/day05/</guid>
			<description>Day05 方法 回顾 java的语法： 程序的组成 注释 关键字 标识符 数据 常量 变量 数据类型 基本 引用： 数组 数组的定义格式 int[] arr = new int[3]; int[] arr = new int[]{4,5,7,7}; int[] arr = {6,7,8,9}; 数组的使用 int[] arr = {6,7,8,9}; System.out.println(arr[0]); arr[0] = 10;
数组的内存图： 一个数组的内存图 int[] arr = {6,7,8,9}; System.out.println(arr); arr[0] = 10; System.out.println(arr); 两个数组的内存图 int[] arrA = new int[3]; int[] arrB = new int[3]; arrA[0] = 10; System.out.println(arrB[0]); //0  多个变量指向同一数组的内存图 int[] arrA = new int[3]; int[] arrB = arrA; arrA[0] = 10; System.</description>
			<content type="html"><![CDATA[<h1 id="day05-方法">Day05 方法</h1>
<h2 id="回顾">回顾</h2>
<p>java的语法：
程序的组成
注释
关键字
标识符
数据
常量
变量
数据类型
基本
引用：
数组
数组的定义格式
int[] arr = new int[3];
int[] arr = new int[]{4,5,7,7};
int[] arr = {6,7,8,9};
数组的使用
int[] arr = {6,7,8,9};
System.out.println(arr[0]);
arr[0] = 10;</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">数组的内存图</span><span class="err">：</span>
    <span class="n">一个数组的内存图</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="n">6</span><span class="o">,</span><span class="n">7</span><span class="o">,</span><span class="n">8</span><span class="o">,</span><span class="n">9</span><span class="o">};</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
<span class="n">arr</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>

<span class="n">两个数组的内存图</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">arrA</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">3</span><span class="o">];</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arrB</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">3</span><span class="o">];</span>

<span class="n">arrA</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arrB</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span> <span class="c1">//0
</span><span class="c1"></span>
<span class="n">多个变量指向同一数组的内存图</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">arrA</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">3</span><span class="o">];</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arrB</span> <span class="o">=</span> <span class="n">arrA</span><span class="o">;</span>
<span class="n">arrA</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arrB</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span> <span class="c1">//10
</span><span class="c1"></span>
<span class="n">数组的常见的异常</span><span class="err">：</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">3</span><span class="o">];</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">110</span><span class="o">]);</span> 

<span class="kt">int</span><span class="o">[]</span> <span class="n">arrA</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">110</span><span class="o">]);</span>

<span class="n">数组的遍历</span><span class="err">：</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">3</span><span class="o">];</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例1</span><span class="err">：</span><span class="n">求数组的最大值</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="n">6</span><span class="o">,</span><span class="n">7</span><span class="o">,</span><span class="n">8</span><span class="o">,</span><span class="n">9</span><span class="o">};</span>
<span class="kt">int</span> <span class="n">leitai</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">leitai</span><span class="o">){</span>
        <span class="n">leitai</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="n">案例2</span><span class="err">：</span><span class="n">求数组的和</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="n">6</span><span class="o">,</span><span class="n">7</span><span class="o">,</span><span class="n">8</span><span class="o">,</span><span class="n">9</span><span class="o">};</span>
<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
<span class="o">}</span>

<span class="n">案例3</span><span class="err">：</span><span class="n">找某个元素</span> <span class="n">第一次出现的索引位置</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="n">6</span><span class="o">,</span><span class="n">7</span><span class="o">,</span><span class="n">8</span><span class="o">,</span><span class="n">9</span><span class="o">};</span>  <span class="c1">// 找7这个元素第一次出现的索引位置
</span><span class="c1"></span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>

<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">7</span><span class="o">==</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
        <span class="n">index</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="n">案例4</span><span class="err">：</span> <span class="n">评委打分的题</span><span class="err">。</span>

    <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">6</span><span class="o">];</span>
<span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">;</span><span class="n">i</span><span class="o">++</span> <span class="o">){</span>
    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div><p>​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
<span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">;</span><span class="n">i</span><span class="o">++</span> <span class="o">){</span>
    <span class="n">sum</span> <span class="o">+=</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">){</span>
        <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">){</span>
        <span class="n">min</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="n">sum</span> <span class="o">-</span> <span class="n">max</span> <span class="o">-</span> <span class="n">min</span><span class="o">)</span> <span class="o">/(</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">2</span><span class="o">.</span><span class="na">0</span><span class="o">));</span>

<span class="n">类</span>
    <span class="n">接口</span>
    <span class="n">类型转换</span>
    <span class="n">隐式</span>
    <span class="n">强制</span>
    <span class="n">符号</span>
    <span class="n">基本符号</span>
    <span class="n">运算符</span>

    <span class="n">语句</span><span class="err">：</span>
    <span class="n">顺序结构</span>
    <span class="n">选择结构</span>
    <span class="k">if</span> <span class="k">switch</span>
        <span class="n">循环结构</span>
        <span class="k">for</span> <span class="k">while</span> <span class="n">dowhile</span>
</code></pre></div><h2 id="方法">方法</h2>
<p><strong>作用：提高代码的复用性。（循环也可以提高代码的复用性， 但是他只对局部代码去重复， 方法 可以提高全局的复用度）</strong></p>
<h3 id="方法使用1-基本使用">方法使用1-基本使用：</h3>
<p>基本定义格式：
public static void 方法名(){
很多代码。
}</p>
<pre><code>            public static 写死的。
            void 代表的是没有返回值的。
            方法名 ： 标识符  组成大小写字母0-9$_ 不能关键字 不能数字开头   大驼峰 小驼峰 峡谷先锋
</code></pre>
<h3 id="注意事项">注意事项：</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">			<span class="n">1</span><span class="err">：</span><span class="n">方法定义了之后</span> <span class="nf">不调用不执行的</span> <span class="o">(</span><span class="n">main方法才是程序的入口</span><span class="err">，</span> <span class="n">我们执行职能执行main方法</span><span class="err">，</span> <span class="n">你要想让自己的方法执行</span><span class="err">，</span><span class="n">就必须要在main方法中被调用</span><span class="o">)</span><span class="n">jaba</span>
			<span class="n">2</span><span class="err">：</span><span class="n">方法和方法都是独立的</span><span class="err">，</span> <span class="n">不能嵌套定义</span><span class="err">。</span>
			<span class="n">3</span><span class="err">：</span><span class="n">方法的定义</span> <span class="n">没有先后顺序</span>
			<span class="n">4</span><span class="err">：</span> <span class="n">main方法调</span>
</code></pre></div><p>举例：</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo3</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">(){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;3&#34;</span><span class="o">);</span>  <span class="c1">// 第三步
</span><span class="c1"></span><span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;1&#34;</span><span class="o">);</span>  <span class="c1">// 第一步
</span><span class="c1"></span><span class="n">show</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;结束&#34;</span><span class="o">);</span>  <span class="c1">// 第五步
</span><span class="c1"></span><span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;2&#34;</span><span class="o">);</span>  <span class="c1">// 第二步
</span><span class="c1"></span><span class="n">method</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;4&#34;</span><span class="o">);</span>  <span class="c1">// 第四步
</span><span class="c1"></span><span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>案例：定义一个方法 ， 判断9这个数 是奇数还是偶数 如果是奇数，就打印奇数， 如果是偶数就打印偶数。</p>
<pre><code>public class Demo5 {
					public static void main(String[] args) {
						judge9JiOu();
					}
</code></pre><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">//定义一个方法 ， 判断9这个数 是奇数还是偶数 如果是奇数，就打印奇数， 如果是偶数就打印偶数。
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">judge9JiOu</span><span class="o">(){</span>
    <span class="cm">/*if (9%2==0){
</span><span class="cm">                                System.out.println(&#34;偶数&#34;);
</span><span class="cm">                            }else{
</span><span class="cm">                                System.out.println(&#34;奇数&#34;);
</span><span class="cm">                            }*/</span>

    <span class="c1">// ifesle 如果否则 这个逻辑结构  和 我们的三元运算符 有点类似。
</span><span class="c1"></span>
    <span class="c1">// 条件表达式 ? 表达式1 : 表达式2;
</span><span class="c1"></span>
    <span class="c1">//9%2==0?System.out.println(&#34;偶数&#34;) :  System.out.println(&#34;奇数&#34;);   // 表达式不能单独成语句。
</span><span class="c1"></span>
    <span class="c1">//int a = 9%2==0? System.out.println(&#34;偶数&#34;) :  System.out.println(&#34;奇数&#34;);
</span><span class="c1"></span>    <span class="c1">//  表达式1   表达式2  这两个东西 无论多么复杂 最终必须要有值。
</span><span class="c1"></span>    <span class="cm">/*
</span><span class="cm">                            int a = 10;
</span><span class="cm">                            int b = 20;
</span><span class="cm">                            int max = a&gt;b ? a : b;
</span><span class="cm">
</span><span class="cm">                            int max1;
</span><span class="cm">                            if (a&gt;b){
</span><span class="cm">                                max1= a;
</span><span class="cm">                            }else{
</span><span class="cm">                                max1 = b;
</span><span class="cm">                            }*/</span>
    <span class="c1">// 能用三元的地方 一定可以用 ifelse的 ，但是能用ifelse的地方是不一定能用三元的。
</span><span class="c1"></span>    <span class="c1">// 因为三元表达式， 要求 : 两侧的东西 是必须要有值的。
</span><span class="c1"></span>    <span class="c1">// 而ifelse  是用{}结构 他里面可以写很多很多的语句 表达很多的内容 不一定非要有值的， 所以ifelse更加灵活。
</span><span class="c1"></span>
    <span class="cm">/*System.out.println(&#34;奇数&#34;);
</span><span class="cm">                            System.out.println(&#34;偶数&#34;);*/</span>

    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">9</span><span class="o">%</span><span class="n">2</span><span class="o">==</span><span class="n">0</span><span class="o">?</span><span class="s">&#34;偶数&#34;</span><span class="o">:</span><span class="s">&#34;奇数&#34;</span><span class="o">);</span>

<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="方法的使用2-参数用法">方法的使用2-参数用法</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">参数位置</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">方法名字</span><span class="o">(</span><span class="n">数据类型</span> <span class="n">变量名</span><span class="o">,</span> <span class="n">数据类型</span> <span class="n">变量名</span> <span class="o">....){</span>
<span class="n">很多的语句</span><span class="o">;</span>
<span class="o">}</span>
<span class="n">案例演示</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo7</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

<span class="c1">//judge9JiOu();
</span><span class="c1"></span>
<span class="n">judgeShuJiOu</span><span class="o">(</span><span class="n">10</span><span class="o">);</span>

<span class="n">judgeShuJiOu</span><span class="o">(</span><span class="n">11</span><span class="o">);</span>

<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="n">judgeShuJiOu</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>

<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">21</span><span class="o">;</span>
<span class="n">judgeShuJiOu</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>

<span class="o">}</span>
<span class="n">s</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="cm">/*public static void judge9JiOu(){
</span><span class="cm">System.out.println(9%2==0?&#34;偶数&#34;:&#34;奇数&#34;);
</span><span class="cm">}*/</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">judgeShuJiOu</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span> <span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">%</span><span class="n">2</span><span class="o">==</span><span class="n">0</span><span class="o">?</span><span class="s">&#34;偶数&#34;</span><span class="o">:</span><span class="s">&#34;奇数&#34;</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo9</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="cm">/*int a= 10;
</span><span class="cm">System.out.println(a%2==0?&#34;偶数&#34;:&#34;奇数&#34;);*/</span>

<span class="cm">/*int c = 10;
</span><span class="cm">int d = 30;
</span><span class="cm">panDuanShuJiOu(c,d);*/</span>

<span class="cm">/*byte c = 10;
</span><span class="cm">byte d = 20;
</span><span class="cm">panDuanShuJiOu(c,d);*/</span>

<span class="kt">long</span> <span class="n">c</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">long</span> <span class="n">d</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="c1">//panDuanShuJiOu(c,d);
</span><span class="c1"></span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">panDuanShuJiOu</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span><span class="kt">int</span> <span class="n">b</span><span class="o">){</span>  <span class="c1">// 箱子的大小是 4个字节箱子
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">%</span><span class="n">2</span><span class="o">==</span><span class="n">0</span><span class="o">?</span><span class="s">&#34;偶数&#34;</span><span class="o">:</span><span class="s">&#34;奇数&#34;</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">%</span><span class="n">2</span><span class="o">==</span><span class="n">0</span><span class="o">?</span><span class="s">&#34;偶数&#34;</span><span class="o">:</span><span class="s">&#34;奇数&#34;</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>​			案例1 : 判断一个年龄 是否成年， 如果成年了 打印可以进入网吧  如果不成年 打印不能进入网吧，成年年龄 也不能写死，  因为每个国家的成年年龄不同的，</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo10</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="n">judgeAdultAge</span><span class="o">(</span><span class="n">20</span><span class="o">,</span><span class="n">18</span><span class="o">);</span>

<span class="n">judgeAdultAge</span><span class="o">(</span><span class="n">16</span><span class="o">,</span><span class="n">14</span><span class="o">);</span>

<span class="n">judgeAdultAge</span><span class="o">(</span><span class="n">14</span><span class="o">,</span><span class="n">16</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">//判断一个年龄 是否成年， 如果成年了 打印可以进入网吧  如果不成年 打印不能进入网吧，成年年龄 也不能写死，  因为每个国家的成年年龄不同的，
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">judgeAdultAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="kt">int</span> <span class="n">adultAge</span> <span class="o">){</span>
<span class="k">if</span> <span class="o">(</span><span class="n">age</span><span class="o">&gt;=</span> <span class="n">adultAge</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;可以上网吧&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span><span class="o">{</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;不能去网吧&#34;</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>​			案例2： 写一个方法， 打印 m - n的所有奇数。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo6</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="n">printJi</span><span class="o">(</span><span class="n">100</span><span class="o">,</span><span class="n">69</span><span class="o">);</span>
<span class="n">printJi</span><span class="o">(</span><span class="n">69</span><span class="o">,</span><span class="n">100</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">//案例1： 定义一个方法， 打印 m-n之间的 所有的奇数。
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printJi</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
<span class="k">if</span> <span class="o">(</span><span class="n">n</span><span class="o">&lt;</span><span class="n">m</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;您传入的参数 和我要做的事情 有出入&#34;</span><span class="o">);</span>
<span class="o">}</span>

<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">m</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="n">2</span><span class="o">!=</span><span class="n">0</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>

<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="方法的使用3--返回值">方法的使用3&ndash;返回值：</h3>
<p>​		返回值位置：
​			public static 数据类型 方法名字(数据类型 变量名, 数据类型 变量名 &hellip;.){
​				很多的语句;
​				return 返回值;
​			}</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例1</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo8</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

<span class="n">isEquals</span><span class="o">(</span><span class="n">10</span><span class="o">,</span><span class="n">11</span><span class="o">);</span>  <span class="c1">// 直接调用不接收 其实意义不大
</span><span class="c1"></span>
<span class="kt">boolean</span> <span class="n">g</span> <span class="o">=</span> <span class="n">isEquals</span><span class="o">(</span><span class="n">10</span><span class="o">,</span><span class="n">11</span><span class="o">);</span>  <span class="c1">// 调用了之后 我们用一个变量去接收。
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">g</span><span class="o">);</span> <span class="c1">//false
</span><span class="c1"></span>
<span class="kt">boolean</span> <span class="n">c</span> <span class="o">=</span> <span class="n">isEquals</span><span class="o">(</span><span class="n">15</span><span class="o">,</span> <span class="n">14</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>

<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">isEquals</span><span class="o">(</span><span class="n">20</span><span class="o">,</span><span class="n">20</span><span class="o">));</span>  <span class="c1">// 调用了之后 我直接打印返回的结果。
</span><span class="c1"></span><span class="o">}</span>

<span class="cm">/*
</span><span class="cm">两个数是否相同
</span><span class="cm">*/</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isEquals</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
<span class="kt">boolean</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="o">;</span>
<span class="k">return</span> <span class="n">c</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>

</code></pre></div><p>案例2：</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo7</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">19</span><span class="o">;</span>
<span class="c1">//judgeAdult(age,18);
</span><span class="c1">//boolean b = judgeAdult(age, 18);
</span><span class="c1">//if (b){
</span><span class="c1"></span><span class="k">if</span> <span class="o">(</span><span class="n">judgeAdult</span><span class="o">(</span><span class="n">age</span><span class="o">,</span> <span class="n">18</span><span class="o">)){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;你可以结婚了&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span><span class="o">{</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;不能结婚&#34;</span><span class="o">);</span>
<span class="o">}</span>

<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">judgeAdult</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="kt">int</span> <span class="n">adultAge</span><span class="o">){</span>
<span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="n">adultAge</span><span class="o">){</span>			
<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例3</span><span class="err">：</span> <span class="n">定义一个方法</span><span class="err">，</span> <span class="n">返回三个int数的最大值</span><span class="err">。</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo9</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">getMax</span><span class="o">(</span><span class="n">20</span><span class="o">,</span> <span class="n">30</span><span class="o">,</span> <span class="n">45</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">//定义一个方法， 返回三个int数的最大值。
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getMax</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">){</span>
<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span> <span class="o">?</span> <span class="n">a</span> <span class="o">:</span> <span class="n">b</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">&gt;</span> <span class="n">c</span> <span class="o">?</span> <span class="n">temp</span> <span class="o">:</span> <span class="n">c</span><span class="o">;</span>
<span class="k">return</span> <span class="n">max</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="方法的通用格式总结">方法的通用格式总结：</h3>
<p>​			public static 数据类型 方法名字(数据类型 变量名, 数据类型 变量名 &hellip;.){
​				很多的语句;
​				return 返回值;
​			}</p>
<p>定义的时候 两个明确：
参数：如果你定义的这个方法功能， 是需要一些原材料的，这时候你就需要定义参数， 如果不需要原材料就不用写参数
返回值类型：如果你这个方法，执行结束之后 需要有产品产出，就需要定义返回值， 如果没有 就写void</p>
<h3 id="方法的注意事项">方法的注意事项：</h3>
<p>​	<strong>1：方法不能嵌套
​			2：方法和方法之间是没有先后顺序的。
​			3：方法不调用不会执行的，  因为我们程序的入口都是main方法。
​			4：void的方法，说明方法内是不能有返回值的，  但是你是可以写一个 单独的return的。用来强制终止方法。</strong></p>
<p>​		**return 这个关键字的作用， 两个作用 
​					第一个：return 强制终止方法的作用。
​					第二个： return 返回值， 把 值扔给调用者 **</p>
<p>5：如果一个方法有返回值类型， 那么这个方法 则必须各个逻辑上，都应该有返回值。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例1</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getInt</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span> <span class="o">){</span>
<span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">10</span><span class="o">){</span>
<span class="k">return</span> <span class="n">a</span> <span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span> <span class="c1">// 编译
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例2</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getInt</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span> <span class="o">){</span>
<span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>
<span class="k">return</span> <span class="n">a</span> <span class="o">;</span>
<span class="o">}</span><span class="k">else</span><span class="o">{</span>
<span class="k">return</span> <span class="n">0</span><span class="o">-</span><span class="n">a</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span> <span class="c1">// 编译正确。 要么进入 if  要么进入else  所以这个方法是肯定会执行return的。
</span><span class="c1"></span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例3</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getInt</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span> <span class="o">){</span>
<span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>
<span class="k">return</span> <span class="n">a</span> <span class="o">;</span>
<span class="o">}</span>
<span class="k">return</span> <span class="n">0</span><span class="o">-</span><span class="n">a</span><span class="o">;</span> 
<span class="o">}</span><span class="c1">// 编译正
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">
<span class="n">案例4</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getInt</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span> <span class="o">){</span>
<span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>
<span class="k">return</span> <span class="n">a</span> <span class="o">;</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="n">0</span><span class="o">){</span>
<span class="k">return</span> <span class="n">0</span><span class="o">;</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">&lt;</span><span class="n">0</span><span class="o">){</span>
<span class="k">return</span> <span class="n">0</span><span class="o">-</span><span class="n">a</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>  <span class="c1">// 编译错
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例5</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getInt</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span> <span class="o">){</span>
<span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>
<span class="k">return</span> <span class="n">a</span> <span class="o">;</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="n">0</span><span class="o">){</span>
<span class="k">return</span> <span class="n">0</span><span class="o">;</span>
<span class="o">}</span><span class="k">else</span><span class="o">{</span>
<span class="k">return</span> <span class="n">0</span><span class="o">-</span><span class="n">a</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span> <span class="c1">// 编译正确：这个结构语句的逻辑是完善的。
</span></code></pre></div><h3 id="方法的重载">方法的重载：</h3>
<p>概念： 同一个类中， 出现了方法名相同 参数列表必须不同  返回值类型无关 这些方法 相互重载。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">
<span class="n">案例1</span><span class="err">：</span>
<span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">){</span>

<span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">show</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">){</span>  <span class="c1">// 方法重复，  方法的返回类型 无所谓
</span><span class="c1"></span><span class="k">return</span> <span class="n">a</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>

</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="n">案例2</span><span class="err">：</span>
    <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">){</span>

    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">show</span><span class="o">(</span><span class="kt">double</span> <span class="n">a</span><span class="o">){</span>  <span class="c1">// 重载 类型不同
</span><span class="c1"></span>    <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">}</span>

</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例3</span><span class="err">：</span>
<span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">){</span>

<span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(</span><span class="kt">int</span> <span class="n">b</span><span class="o">){</span>  <span class="c1">//报错 方法重复
</span><span class="c1"></span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例3</span><span class="err">：</span>
<span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">){</span>

<span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(</span><span class="kt">int</span> <span class="n">b</span><span class="o">){</span>  <span class="c1">//报错 方法重复
</span><span class="c1"></span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">
<span class="n">案例5</span><span class="err">：</span>
<span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(</span><span class="kt">double</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>

<span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">double</span> <span class="n">b</span><span class="o">){</span>  <span class="c1">// 重载 类型的顺序不同
</span><span class="c1"></span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>好处：给程序员减轻了记忆的压力。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">
<span class="n">案例</span><span class="err">：</span> <span class="n">比较两个数是否相同</span> <span class="o">(</span><span class="kt">byte</span> <span class="kt">short</span> <span class="kt">int</span> <span class="kt">long</span><span class="o">)</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo12</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
<span class="k">return</span> <span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="o">;</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">byte</span> <span class="n">a</span><span class="o">,</span> <span class="kt">byte</span> <span class="n">b</span><span class="o">){</span>
<span class="k">return</span> <span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="o">;</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">long</span> <span class="n">a</span><span class="o">,</span> <span class="kt">long</span> <span class="n">b</span><span class="o">){</span>
<span class="k">return</span> <span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="o">;</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">short</span> <span class="n">a</span><span class="o">,</span> <span class="kt">short</span> <span class="n">b</span><span class="o">){</span>
<span class="k">return</span> <span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>

</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">
<span class="c1">// 如果单纯为了实现这道题的需求来说。 用下面的方法更简单。
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo14</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="kt">byte</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="kt">boolean</span> <span class="n">compare</span> <span class="o">=</span> <span class="n">compare</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">compare</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">long</span> <span class="n">lo1</span><span class="o">,</span> <span class="kt">long</span> <span class="n">lo2</span><span class="o">){</span>  <span class="c1">//  面向对象 多态。 
</span><span class="c1"></span><span class="k">return</span> <span class="n">lo1</span><span class="o">==</span><span class="n">lo2</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>

</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">方法参数的传递</span><span class="err">：</span>
<span class="n">案例1</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo14</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">// 10
</span><span class="c1"></span><span class="n">change</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">// 10
</span><span class="c1"></span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">change</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">){</span>   
<span class="n">a</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例6</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo14</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">// 10
</span><span class="c1"></span><span class="n">a</span> <span class="o">=</span> <span class="n">change</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">// 20
</span><span class="c1"></span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">change</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">){</span>   
<span class="n">a</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="k">return</span> <span class="n">a</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例2</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo14</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="n">10</span><span class="o">,</span><span class="n">20</span><span class="o">,</span><span class="n">30</span><span class="o">};</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">1</span><span class="o">]);</span> <span class="c1">// 20
</span><span class="c1"></span><span class="n">change</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">1</span><span class="o">]);</span> <span class="c1">// 200
</span><span class="c1"></span><span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">change</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">){</span>   
<span class="n">arr</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">200</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例5</span><span class="err">：</span>	
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo14</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="n">10</span><span class="o">,</span><span class="n">20</span><span class="o">,</span><span class="n">30</span><span class="o">};</span>  <span class="c1">//0x001
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">1</span><span class="o">]);</span> <span class="c1">// 20
</span><span class="c1"></span><span class="n">arr</span> <span class="o">=</span> <span class="n">change</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span> <span class="c1">// arr = 0x001
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">1</span><span class="o">]);</span> <span class="c1">// 200
</span><span class="c1"></span><span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">change</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">){</span>    <span class="c1">//arr = 0x001
</span><span class="c1"></span><span class="n">arr</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">200</span><span class="o">;</span>
<span class="k">return</span> <span class="n">arr</span><span class="o">;</span>  <span class="c1">//0x001
</span><span class="c1"></span><span class="o">}</span>
<span class="o">}</span>
</code></pre></div><pre><code>案例3：
public class Demo14 {
public static void main(String[] args) {
int[] arr = {10,20,30};
System.out.println(arr[1]); // 20
change(arr);
System.out.println(arr[1]); // 20
}

public static void change(int[] arr){   
arr = new int[]{100,200,300};
}
} // 只有引类型 传递到另一个方法里面， 去操作了这个引用类型里面的内容的时候， 才会改变的。
</code></pre><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例4</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo14</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="n">10</span><span class="o">,</span><span class="n">20</span><span class="o">,</span><span class="n">30</span><span class="o">};</span>  <span class="c1">//oo1 
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">1</span><span class="o">]);</span> <span class="c1">// 20
</span><span class="c1"></span><span class="n">arr</span> <span class="o">=</span> <span class="n">change</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span> <span class="c1">// arr=002
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">1</span><span class="o">]);</span> <span class="c1">// 200
</span><span class="c1"></span><span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">change</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">){</span>   <span class="c1">//001 
</span><span class="c1"></span><span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">100</span><span class="o">,</span><span class="n">200</span><span class="o">,</span><span class="n">300</span><span class="o">};</span>  <span class="c1">//002
</span><span class="c1"></span><span class="k">return</span> <span class="n">arr</span><span class="o">;</span> <span class="c1">//002
</span><span class="c1"></span><span class="o">}</span>
<span class="o">}</span> 
</code></pre></div><p><strong>结论：
是不要片面理解 ，要学会自己分析。</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">练习1</span><span class="err">：</span> <span class="n">定义一个方法</span> <span class="n">传入一个int</span><span class="o">[]</span> <span class="n">遍历数组</span><span class="err">。</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo19</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="n">6</span><span class="o">,</span><span class="n">8</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">5</span><span class="o">};</span>
<span class="n">printArr</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">//练习1： 定义一个方法 传入一个int[] 遍历数组。
</span><span class="c1"></span><span class="cm">/*
</span><span class="cm">参数： int[] arr
</span><span class="cm">返回值类型： void
</span><span class="cm">*/</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printArr</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">){</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="s">&#34; &#34;</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">练习2</span><span class="err">：</span> <span class="n">定义一个方法</span> <span class="n">传入一个int</span><span class="o">[]</span> <span class="n">返回数组的最大值</span><span class="err">。</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo20</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="n">5</span><span class="o">,</span><span class="n">7</span><span class="o">,</span><span class="n">9</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">2</span><span class="o">};</span>
<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">getMax</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 定义一个方法 传入一个int[] 返回数组的最大值。
</span><span class="c1"></span><span class="cm">/*
</span><span class="cm">参数： int[] arr
</span><span class="cm">返回值类型： int
</span><span class="cm">*/</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getMax</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">){</span>
<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]&gt;</span> <span class="n">max</span><span class="o">){</span>
<span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
<span class="o">}</span>
<span class="o">}</span>
<span class="k">return</span> <span class="n">max</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">练习3</span><span class="err">：</span> <span class="n">定义一个方法</span> <span class="n">传入一个int</span><span class="o">[]</span> <span class="n">返回数组的</span> <span class="n">最大和最小值</span><span class="err">。</span>	
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo20</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="n">5</span><span class="o">,</span><span class="n">7</span><span class="o">,</span><span class="n">9</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">2</span><span class="o">};</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">brr</span> <span class="o">=</span> <span class="n">getMaxAndMin</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">brr</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">brr</span><span class="o">[</span><span class="n">1</span><span class="o">]);</span>
<span class="o">}</span>

<span class="c1">// 定义一个方法 传入一个int[] 返回数组的最大值。
</span><span class="c1"></span><span class="cm">/*
</span><span class="cm">参数： int[] arr
</span><span class="cm">返回值类型： int
</span><span class="cm">*/</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">getMaxAndMin</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">){</span>
<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
<span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]&gt;</span> <span class="n">max</span><span class="o">){</span>
<span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
<span class="o">}</span>

<span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">){</span>
<span class="n">min</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
<span class="o">}</span>
<span class="o">}</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr1</span> <span class="o">=</span> <span class="o">{</span><span class="n">max</span><span class="o">,</span> <span class="n">min</span><span class="o">};</span>
<span class="k">return</span> <span class="n">arr1</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Day04 IDEA 和数组</title>
			<link>https://demon-github1996.github.io/posts/day04/</link>
			<pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
			
			<guid>https://demon-github1996.github.io/posts/day04/</guid>
			<description>IDEA idea &amp;ndash; 今后开发 全部使用idea 来开发。 idea版本： 2017版 最多支持到 jdk10 2018版 最多支持到 jdk11， jdk12不支持。 2019版 支持jdk12 jdk13 不支持jdk14 2020版 都支持。
 管理java文件的目录结构：总目录， 以后 所有的idea产生的 所有的文件 基本上都会在这里面。 D:\develop\ideaProjects 项目目录模块目录包目录java文件 资料： ideaIU-2019.3.3.exe jetbrains-agent.jar 破解包 IDEA汉化包 激活教程视频
 idea的快捷键：psvm + 回车 快速生成main方法sout + 回车 快速生成输出语句Alt + 1 打开 \ 隐藏工程目录结构Alt + 4 打开 \ 隐藏控制台Ctrl + D 向下复制一行Ctrl + X 剪切当前行Ctrl + alt + L 格式化代码Alt+ enter 代码修正提示Ctrl + / 批量加入单行注释，再按一次就是取消Ctrl + shift + / 批量加入多行注释，再按一次就是取消Alt + shift + ↑ 上移当前行Alt + shift + ↓ 下移当前行true.</description>
			<content type="html"><![CDATA[<h1 id="idea">IDEA</h1>
<p>idea &ndash;  今后开发 全部使用idea 来开发。
idea版本：
2017版  最多支持到 jdk10
2018版  最多支持到 jdk11，     jdk12不支持。
2019版  支持jdk12 jdk13 不支持jdk14
2020版  都支持。</p>
<pre><code>    管理java文件的目录结构：
         总目录，  以后 所有的idea产生的 所有的文件 基本上都会在这里面。  D:\develop\ideaProjects 
		 	
            项目目录
                模块目录
                    包目录
                        java文件
</code></pre>
<p>资料：
ideaIU-2019.3.3.exe
jetbrains-agent.jar  破解包  IDEA汉化包
激活教程视频</p>
<pre><code>    idea的快捷键：
        psvm + 回车 快速生成main方法
        sout + 回车 快速生成输出语句
        Alt + 1 打开 \ 隐藏工程目录结构
        Alt + 4 打开 \ 隐藏控制台

        Ctrl + D 向下复制一行
        Ctrl + X 剪切当前行
        Ctrl + alt + L 格式化代码
        Alt+ enter 代码修正提示
        Ctrl + / 批量加入单行注释，再按一次就是取消
        Ctrl + shift + / 批量加入多行注释，再按一次就是取消
        Alt + shift + ↑ 上移当前行
        Alt + shift + ↓ 下移当前行

        true.if
        5.fori
        某某.var
				
        模块的操作：
            新建
            删除
            导入
		
        项目的关闭和打开
            关闭  close project
            打开。
            新建。
		
        修改名称：
            右键  refactor
</code></pre>
<h1 id="数组">数组：</h1>
<p>回顾一下之前提到过数组的地方：
1：HelloWorld案例</p>
<pre><code>public class Demo {
public static void main(String[] args){
// String[]  就是一个数组  字符串数组
}
}
</code></pre><p>2：符号
[ ] : 只有数组 使用[ ]</p>
<p>3: 数据类型
基本类型
引用类型
数组 ： 
数组类型的写法    数据类型[]
byte[]   short[]  int[] 
类
Random  Scanner
接口
综上所述： 数组是引用类型，数组要用[]</p>
<h2 id="数组的定义">数组的定义：</h2>
<p>变量的定义格式:</p>
<pre><code>	数据类型 变量名 = 值;

​			数据类型 变量名;
​			变量名 = 值;
​			
​			int a = 10;
​			int b ;
​			b = 20;

​			int[] arr1 = 值;
​			int[] arr2;
​			arr2 = 值;

​			int arr3[] = 值;

</code></pre><h3 id="1-动态初始化">1: 动态初始化</h3>
<pre><code>
// 数据类型[] 变量名 = new 数据类型[长度值];
int[] arr = new int[3];
System.out.println(arr); //地址值。

/*
int : 代表 数组里面存储的是int类型的数据
[]  : 代表 数组
arr ： 变量的名字， 或者数组名。
=  ： 右侧的值 赋值给左侧的 arr

new ： 引用类型的数据 一般都比较大， 所以他们创建的时候 需要去内存申请开辟空间。
这时候就需要用 new关键字用来去内存申请的。
Random r = new Random(); //  类Random 
int ： 开辟的这块儿空间里面存储 int类型的数据
[3] : 这块空间里面能存3个int数。
*/
</code></pre><p>之所以叫做动态初始化，  你创建数组的时候， 你只给了长度，而没有给明数组里面的每个格子的值。  那么数组里面有值吗？？ 有，
因为 你去内存中开辟空间， 是必须要拿着占位值，去占位的，否则 内存不会分配给你。
所以 底层会根据你的数组类型，不同的数组类型 会拿着不同的值 去占位值的。</p>
<pre><code>
整数数组 ： 0
int[] arr = new int[3]; //0 0 0
byte[] bys = new byte[3]; //0 0 0
小数数组 ： 0.0
float[] flos = new float[4]; // 0.0 0.0 0.0 0.0
布尔数组 ： false
字符数组 ： '\u0000'

引用类型数组 ： null 
Random[]  rrr = new Random[3]; 
Scanner[] scc = new Scanner[4];
</code></pre><h3 id="2-静态初始化">2: 静态初始化</h3>
<pre><code>int[] arr = new int[]{4,7,9};  // 自己给值， 长度 系统来确定。  // 长度不能写
</code></pre><h3 id="3静态初始化的简写格式">3：静态初始化的简写格式</h3>
<pre><code>int[] arr = {4,6,9}; 


简化格式注意事项：
int[] arr = new int[3];
int[] arr1 ;
arr1 = new int[3];


int[] arr2 = new int[]{4,6,9};
int[] arr2;
arr2 = new int[]{4,6,9};

int[] arr3 = {4,6,9}; 
int[] arr4;
arr4 = {4,6,9};   // 编译报错。  简化格式不能分开定义。

</code></pre><h2 id="数组的访问">数组的访问：</h2>
<p>索引：&ldquo;角标&rdquo;  数组里面的每个位置 都有一个编号，  这个编号 是 从0 到 数组的最大长度-1</p>
<pre><code>int[] arr = new int[3];
System.out.println(arr); // 地址
System.out.println(arr[0]); //0
System.out.println(arr[1]); //0
System.out.println(arr[2]); //0

System.out.println(arr[3]); // 报错。 arr的数组索引最大到 2

boolean[] boos = new boolean[3];

System.out.println(boos[0]); //false

boos[0] = true;
System.out.println(boos[0]); //true
</code></pre>
<h2 id="数组的内存图">数组的内存图：</h2>
<p>一个数组的创建过程</p>
<pre><code>int[] arr = new int[3];
System.out.println(arr); // [Iab345
arr[0] = 10;
System.out.println(arr); // [Iab345  不变的。
</code></pre><p>两个数组的内存图：</p>
<pre><code>int[] arr = new int[3];
System.out.println(arr[0]); // 0
int[] brr = new int[3];
brr[0]  = 10;
System.out.println(arr[0]); // 10
</code></pre><p>多个变量指向同一个数组的内存图</p>
<pre><code>int[] arr = new int[3];
System.out.println(arr[0]); // 0
int[] brr = arr;
brr[0]  = 10;
System.out.println(arr[0]); // 10
</code></pre><h2 id="数组运行容易出错的问题">数组运行容易出错的问题：</h2>
<h3 id="1-索引越界异常">1： 索引越界【异常】</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">3</span><span class="o">];</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">100</span><span class="o">]);</span>  <span class="c1">//ArrayIndexOutOfBoundsException
</span></code></pre></div><h3 id="2空指针异常-所有引用类型-最常见的异常">2：空指针【异常】 所有引用类型 最常见的异常。</h3>
<pre><code>int[] arr = null;
System.out.println(arr[0]); // NullPointerException
</code></pre><h2 id="数组的遍历">数组的遍历：</h2>
<pre><code>//数组的遍历：
			// 遍历： 对容器里面的元素 一个一个的 展示出来。

			//int[] arr = {5,7,9,3,1,4,8};

			// 遍历
			/*
			System.out.println(arr[0]);
			System.out.println(arr[1]);
			System.out.println(arr[2]);
			System.out.println(arr[3]);
			System.out.println(arr[4]);
			System.out.println(arr[5]);
			System.out.println(arr[6]);
			*/
			// 上面的代码 重复的太多了， 这种太low了。
			// 遍历
			/*
			for (int i = 0; i &lt; 7; i++) {
				System.out.println(arr[i]);
			}
			*/

			// 上面的代码 虽然解决了重复，但是 通用性不高


			int[] arr = {5,7,9,3,1};

			//int a = arr.length;
			// System.out.println(a);
			//System.out.println(arr.length);

			for (int i = 0; i &lt; arr.length; i++) {
				System.out.println(arr[i]);
			}  // 这个代码 才是 通用性高的 遍历数组代码。

			// 快捷键 arr.fori

</code></pre><h2 id="案例练习">案例练习：</h2>
<h3 id="案例1-定义一个数组--求数组里面的最大值">案例1： 定义一个数组  求数组里面的最大值</h3>
<pre><code>
int[] arr = {6,7,4,3,9,5,7,8};   // 打印最大值

int leitai = arr[0];

for (int i = 1; i &lt; arr.length; i++) {
if(arr[i] &gt; leitai){
leitai = arr[i];
}
}

System.out.println(leitai);
</code></pre><h3 id="案例2-定义一个数组--求数组里面所有元素的和">案例2： 定义一个数组  求数组里面所有元素的和。</h3>
<pre><code>int[] arr = {6,7,4,3,9,5,7,8};  // 打印 和
int sum =0;
for (int i = 0; i &lt; arr.length; i++) {
sum+=arr[i];
}
System.out.println(sum);
</code></pre><h3 id="案例3-定义一个数组-打印某个元素在数组中第一次出现的索引">案例3： 定义一个数组， 打印某个元素在数组中第一次出现的索引。。</h3>
<pre><code>        int[] arr = {6,7,4,3,9,5,7,8};
        // 打印 9这个数 在数组中第一次出现的索引
        //打印 4

        Scanner sc = new Scanner(System.in);
        int anInt = sc.nextInt();

        int[] arr = {6,7,4,3,9,5,7,8};
        for (int i = 0; i &lt; arr.length; i++) {
        if(arr[i] == anInt){
        System.out.println(i);
        break;
        }
        }
</code></pre><h3 id="案例4-键盘录入6个数-存入到数组中-把数组中的最大值和最小值去除掉之后-求平均值">案例4： 键盘录入6个数 存入到数组中。 把数组中的最大值和最小值去除掉之后 求平均值。</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 键盘录入6个数 存入到数组中。 把数组中的最大值和最小值去除掉之后 求平均值。
</span><span class="c1"></span>
				<span class="cm">/*Scanner sc = new Scanner(System.in);
</span><span class="cm">				int anInt0 = sc.nextInt();
</span><span class="cm">				int anInt1 = sc.nextInt();
</span><span class="cm">				int anInt2 = sc.nextInt();
</span><span class="cm">				int anInt3 = sc.nextInt();
</span><span class="cm">				int anInt4 = sc.nextInt();
</span><span class="cm">				int anInt5 = sc.nextInt();
</span><span class="cm">
</span><span class="cm">				int[] arr = new int[6];
</span><span class="cm">				arr[0] = anInt0;
</span><span class="cm">				arr[1] = anInt1;
</span><span class="cm">				arr[2] = anInt2;
</span><span class="cm">				arr[3] = anInt3;
</span><span class="cm">				arr[4] = anInt4;
</span><span class="cm">				arr[5] = anInt5;*/</span>

				<span class="cm">/*
</span><span class="cm">				Scanner sc = new Scanner(System.in);
</span><span class="cm">				int[] arr = new int[6];
</span><span class="cm">				arr[0] = sc.nextInt();
</span><span class="cm">				arr[1] = sc.nextInt();
</span><span class="cm">				arr[2] = sc.nextInt();
</span><span class="cm">				arr[3] = sc.nextInt();
</span><span class="cm">				arr[4] = sc.nextInt();
</span><span class="cm">				arr[5] = sc.nextInt();
</span><span class="cm">				*/</span>

				<span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
				<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">6</span><span class="o">];</span>
				

				<span class="c1">// 求平均值 ：  (和 - 最大值 - 最小值 )/(个数-2)
</span><span class="c1"></span>				<span class="cm">/*
</span><span class="cm">				//求和
</span><span class="cm">				int sum =0;
</span><span class="cm">				for (int i = 0; i &lt; arr.length; i++) {
</span><span class="cm">					sum+=arr[i];
</span><span class="cm">				}
</span><span class="cm">
</span><span class="cm">				//最大值
</span><span class="cm">				int max = arr[0];
</span><span class="cm">
</span><span class="cm">				for (int i = 1; i &lt; arr.length; i++) {
</span><span class="cm">					if(arr[i] &gt; max){
</span><span class="cm">						max = arr[i];
</span><span class="cm">					}
</span><span class="cm">				}
</span><span class="cm">
</span><span class="cm">				//最小值
</span><span class="cm">				int min = arr[0];
</span><span class="cm">
</span><span class="cm">				for (int i = 1; i &lt; arr.length; i++) {
</span><span class="cm">					if(arr[i] &lt; min){
</span><span class="cm">						min = arr[i];
</span><span class="cm">					}
</span><span class="cm">				}
</span><span class="cm">				*/</span>
				<span class="cm">/*
</span><span class="cm">				int sum =0;
</span><span class="cm">				int max = arr[0];
</span><span class="cm">				int min = arr[0];
</span><span class="cm">				for (int i = 0; i &lt; arr.length; i++) {
</span><span class="cm">					sum+=arr[i];
</span><span class="cm">					if (arr[i]&gt;max){
</span><span class="cm">						max = arr[i];
</span><span class="cm">					}
</span><span class="cm">
</span><span class="cm">					if (arr[i] &lt; min){
</span><span class="cm">						min = arr[i];
</span><span class="cm">					}
</span><span class="cm">				}
</span><span class="cm">				*/</span>
				<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
				<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
				<span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
				<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
					<span class="n">sum</span><span class="o">+=</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
					<span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]&gt;</span><span class="n">max</span><span class="o">){</span>
						<span class="n">max</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
					<span class="o">}</span>
					<span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">){</span>
						<span class="n">min</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
					<span class="o">}</span>
				<span class="o">}</span>

				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="n">sum</span><span class="o">-</span><span class="n">max</span><span class="o">-</span><span class="n">min</span><span class="o">)/(</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="o">));</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Day03 循环</title>
			<link>https://demon-github1996.github.io/posts/day03/</link>
			<pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
			
			<guid>https://demon-github1996.github.io/posts/day03/</guid>
			<description>循环结构 结构语句： 顺序结构 选择结构 switch(☆☆☆) 格式：
​switch (表达式 或者 变量){​case 常量值1:​语句1;​	break;​	case 常量值2:​	语句2;​	break;​	case 常量值3:​	语句3;​	break;​	case 常量值4:​	语句4;​	break;​	...​	default:​	语句n;​	break;​	​	}switch和if的第三种格式比较： 1：能用switch的地方是一定能够用if的第三种格式的， 但是 能用if的第三种格式的地方，是不一定能够使用switch去替换的。 if 可以对范围判断 也可以对值进行判断 switch只能对值进行判断。 2: 当对值进行判断的时候， switch的效率比if高很多。 文章链接：https://www.bilibili.com/read/cv5912019
案例1：if和switch的替换 使用switch做
int a = 10; switch (a){ case 7: System.</description>
			<content type="html"><![CDATA[<h1 id="循环结构">循环结构</h1>
<h2 id="结构语句">结构语句：</h2>
<h3 id="顺序结构">顺序结构</h3>
<h3 id="选择结构">选择结构</h3>
<h4 id="switch">switch(☆☆☆)</h4>
<p>格式：</p>
<pre><code>
​switch (表达式 或者 变量){
​case 常量值1:
​语句1;
​	break;
​	case 常量值2:
​	语句2;
​	break;
​	case 常量值3:
​	语句3;
​	break;
​	case 常量值4:
​	语句4;
​	break;
​	...
​	default:
​	语句n;
​	break;
​					

​	}


</code></pre><p>switch和if的第三种格式比较：
1：能用switch的地方是一定能够用if的第三种格式的，  但是 能用if的第三种格式的地方，是不一定能够使用switch去替换的。
if 可以对范围判断 也可以对值进行判断
switch只能对值进行判断。
2: 当对值进行判断的时候， switch的效率比if高很多。
文章链接：https://www.bilibili.com/read/cv5912019</p>
<p>案例1：if和switch的替换
使用switch做</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">){</span>
<span class="k">case</span> <span class="n">7</span><span class="o">:</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;7&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="k">case</span> <span class="n">8</span><span class="o">:</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;8&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="k">case</span> <span class="n">9</span><span class="o">:</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;9&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="k">case</span> <span class="n">10</span><span class="o">:</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;10&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="k">default</span><span class="o">:</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;default&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><p>使用if做</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span><span class="n">7</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;7&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="n">8</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;8&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="n">9</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;9&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="n">10</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;10&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span><span class="o">{</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;else&#34;</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><p>案例2：我们对范围的判断，是不能使用 switch的
95~100分 : 自行车一辆
90~94分  : 游乐场一次
80~89分	 : 变形金刚一个
80分以下 : 挨顿揍, 这座城市又多了一个伤心的人~</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="n">99</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">score</span><span class="o">){</span>
<span class="c1">//case 95-100:  // case -5
</span><span class="c1">//case 95~100 : // 没有这个符号 
</span><span class="c1">//case  score &lt;100&amp;&amp; score &gt;95   // 报错 99 不能和true去匹配的
</span><span class="c1"></span>
<span class="o">}</span>
<span class="cm">/*
</span><span class="cm">switch ( score &lt;100&amp;&amp; score &gt;95){   // 报错（）里面 不运行 对boolean类型进行判断的
</span><span class="cm">case true:  
</span><span class="cm">
</span><span class="cm">}*/</span>

</code></pre></div><p>注意事项：
<strong>1：case 后面必须是常量 ，不能是变量。</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">){</span>
<span class="k">case</span> <span class="n">b</span><span class="o">:</span>  <span class="c1">// 编译报错 需要常量
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;10&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="k">default</span><span class="o">:</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;default&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><p>​	<strong>2：case 不能重复判断</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">a</span>  <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">){</span>
<span class="k">case</span> <span class="n">4</span><span class="o">:</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;10&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="k">case</span> <span class="n">4</span><span class="o">:</span> <span class="c1">// 编译报错。 重复判断
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;10&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="k">default</span><span class="o">:</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;default&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div><p><strong>3：default可以省略， 和if的第三种格式的 最后那个else也可以省略</strong> <strong>他们是一样的道理</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">a</span>  <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">){</span>
<span class="k">case</span> <span class="n">4</span><span class="o">:</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;10&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div><p><strong>4： if 的第三种格式的 最后那个else 只能放在最后，但是 switch的default 可以放在任意地方。</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>

<span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">){</span>
<span class="k">case</span> <span class="n">7</span><span class="o">:</span> 
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;7&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="k">default</span><span class="o">:</span>  <span class="c1">// 虽然 default可以放在任意的位置 但是他的作用依然还是兜底的，  所有的case都不满足的情况下 他才回去执行的。
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;default&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="k">case</span> <span class="n">8</span><span class="o">:</span> 
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;8&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="k">case</span> <span class="n">10</span><span class="o">:</span> 
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;10&#34;</span><span class="o">);</span>  <span class="c1">//10
</span><span class="c1"></span><span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><p><strong>5：switch的小括号内 的数据类型 必须是这几种之一， byte short char int 枚举 String</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">boolean</span> <span class="n">a</span>  <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">){</span>  <span class="c1">//编译报错 
</span><span class="c1"></span><span class="k">case</span> <span class="kc">true</span><span class="o">:</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;10&#34;</span><span class="o">);</span>
<span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><p><strong>6：break可以省略，会操作 case穿透了。</strong></p>
<p>为什么break可以省略。 因为break是用来终结 switch的。如果你不想终结 switch 就省略就可以了。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">1</span><span class="err">：</span> 
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">){</span>
    <span class="k">case</span> <span class="n">10</span><span class="o">:</span>
        <span class="n">b</span><span class="o">++;</span>
    <span class="k">case</span> <span class="n">20</span><span class="o">:</span>
        <span class="n">b</span><span class="o">++;</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="k">default</span> <span class="o">:</span>
        <span class="n">b</span><span class="o">++;</span>
<span class="o">}</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span> <span class="c1">//2
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nl">2:</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">){</span>
    <span class="k">case</span> <span class="n">10</span><span class="o">:</span>
        <span class="n">b</span><span class="o">++;</span>
    <span class="k">default</span> <span class="o">:</span>
        <span class="n">b</span><span class="o">++;</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="k">case</span> <span class="n">20</span><span class="o">:</span>
        <span class="n">b</span><span class="o">++;</span>
<span class="o">}</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span> <span class="c1">//2
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nl">3:</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">){</span>
    <span class="k">case</span> <span class="n">30</span><span class="o">:</span>
        <span class="n">b</span><span class="o">++;</span>
    <span class="k">default</span> <span class="o">:</span>
        <span class="n">b</span><span class="o">++;</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="k">case</span> <span class="n">20</span><span class="o">:</span>
        <span class="n">b</span><span class="o">++;</span>
<span class="o">}</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span> <span class="c1">//1
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nl">4:</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">){</span>
    <span class="k">case</span> <span class="n">30</span><span class="o">:</span>
        <span class="n">b</span><span class="o">++;</span>
    <span class="k">default</span> <span class="o">:</span>
        <span class="n">b</span><span class="o">++;</span>
    <span class="k">case</span> <span class="n">20</span><span class="o">:</span>
        <span class="n">b</span><span class="o">++;</span>
<span class="o">}</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span> <span class="c1">//2
</span></code></pre></div><h4 id="for">for(☆☆☆☆☆)：</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">格式</span><span class="err">：</span>
<span class="k">for</span> <span class="o">(</span><span class="n">语句</span><span class="o">;</span><span class="n">booelan值</span> <span class="o">;</span> <span class="n">语句</span><span class="o">){</span>
<span class="n">语句体</span><span class="o">;</span>
<span class="o">}</span>

<span class="k">for</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;初始化语句&#34;</span><span class="o">);</span><span class="kc">true</span> <span class="o">;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;控制循环语句&#34;</span><span class="o">)</span> <span class="o">){</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;循环体&#34;</span><span class="o">);</span>
<span class="o">}</span>

</code></pre></div><pre><code>// 你并不想让他无限循环下去。 你想执行有限的次数
//System.out.println(&quot;HelloWorld&quot;);
// 想让他执行5次
// 你怎么知道他执行的5次， 我告诉你 你是数出来的， 每执行一次 你记录一下。
</code></pre><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">5</span> <span class="o">;</span> <span class="n">i</span><span class="o">++){</span> <span class="c1">//0 1 2 3 4
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;HelloWorld&#34;</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">//所以根据每一个部分的作用
</span><span class="c1"></span><span class="k">for</span> <span class="o">(</span><span class="n">初始化语句</span><span class="o">;</span><span class="n">条件表达式</span> <span class="o">;</span> <span class="n">控制循环语句</span><span class="o">){</span>
<span class="n">循环体</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><p>案例1： 打印1-5</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">5</span> <span class="o">;</span> <span class="n">i</span><span class="o">++){</span> <span class="c1">//1 2 3 4 5
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> 
<span class="o">}</span>
</code></pre></div><p>案例2： 打印5-1</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">5</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;</span><span class="n">0</span> <span class="o">;</span> <span class="n">i</span><span class="o">--){</span> 
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="c1">//5 4 3 2 1
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><p>案例3: 打印 55-69</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">55</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">69</span> <span class="o">;</span> <span class="n">i</span><span class="o">++){</span> <span class="c1">//
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> 
<span class="o">}</span>
</code></pre></div><p>案例4：打印 1 4 7 10 13 16 &hellip;..   不能超过100</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">方法一</span><span class="err">：</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">+=</span><span class="n">3</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>

</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">方法二</span><span class="err">：</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
<span class="c1">//if (满足条件){
</span><span class="c1"></span><span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="n">3</span><span class="o">==</span><span class="n">1</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>案例5：打印（10以内的奇数） 1 3 5 7 9</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">方法一</span><span class="err">：</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">+=</span><span class="n">2</span><span class="o">){</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">方法二</span><span class="err">：</span><span class="n">效率比方法一低</span>
<span class="nf">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span> <span class="c1">// 循环里面的条件 是了终止循环用的
</span><span class="c1"></span><span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="n">2</span><span class="o">==</span><span class="n">1</span><span class="o">){</span>    <span class="c1">// 你if里面的判断 那是为了选择执行的。
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>	
<span class="o">}</span>
<span class="cm">/* 下面这样做不行 if和for不能合在一起
</span><span class="cm">true &amp;&amp;false
</span><span class="cm">for (int i =1; i&lt;10 &amp;&amp; i%2==1; i++){
</span><span class="cm">System.out.println(i);	  //1
</span><span class="cm">}
</span><span class="cm">*/</span>
</code></pre></div><p>案例6：打印满足 (个位数 和十位数 相同)的 两位数   11 22 33 44 55 &hellip;.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">方法一</span><span class="err">：</span>
<span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">11</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">100</span> <span class="o">;</span><span class="n">i</span><span class="o">+=</span><span class="n">11</span> <span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="c1">// 11 22 33 44
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">方法二</span><span class="err">：</span>
    <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">11</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">100</span> <span class="o">;</span><span class="n">i</span><span class="o">++</span> <span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="n">11</span><span class="o">==</span><span class="n">0</span><span class="o">){</span>  
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>  <span class="c1">// 11 22 33 44 
</span><span class="c1"></span>        <span class="o">}</span>	
    <span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">方法三</span><span class="err">：</span><span class="n">通用方法</span> <span class="o">--</span><span class="n">把需求的汉语</span> <span class="n">翻译为</span> <span class="n">java语言</span>

    <span class="c1">// 打印这么多满足条件的数组  写 无数个打印语句 你要写多少行。 
</span><span class="c1"></span>    <span class="c1">// 想到 循环
</span><span class="c1"></span>    <span class="c1">// 两位数 给了范围了  10-99
</span><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">99</span><span class="o">;</span><span class="n">i</span><span class="o">++</span> <span class="o">){</span>
        <span class="c1">//满足 (个位数 和十位数 相同)
</span><span class="c1"></span>        <span class="c1">//if (个位数 和十位数 相同){
</span><span class="c1"></span>        <span class="c1">//if (个位数 == 十位数 ){
</span><span class="c1"></span>        <span class="c1">// 个位数
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">ge</span> <span class="o">=</span> <span class="n">i</span> <span class="o">%</span><span class="n">10</span><span class="o">;</span>
        <span class="c1">// 十位数
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">shi</span> <span class="o">=</span> <span class="n">i</span><span class="o">/</span><span class="n">10</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">ge</span> <span class="o">==</span> <span class="n">shi</span> <span class="o">){</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="c1">// 78  78-70 =8 
</span><span class="c1">// 我们的数 都是10进制的。
</span><span class="c1">// 78%10= 8;
</span><span class="c1">// 78/10 = 7;
</span><span class="c1"></span>

<span class="c1">// 57932
</span><span class="c1">// 57932%10 = 2;
</span><span class="c1">// 57932/10%10 = 3      ------ 57932/10 = 5793   5793 %10 =3 
</span><span class="c1">// 57932/10/10%10 = 9
</span><span class="c1">// 57932/10/10/10%10 = 7
</span><span class="c1">//.....
</span><span class="c1">// 规律： 求百位  数/100 %10 = 百位
</span></code></pre></div><p>案例7：打印所有的水仙花数。</p>
<p>1：水仙花数是三位数
2：每个位上的数的立方和 等于该数本身 比如： 371 =  3<em>3</em>3 + 7<em>7</em>7 +1<em>1</em>1</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">999</span><span class="o">;</span><span class="n">i</span><span class="o">++</span> <span class="o">){</span>
<span class="c1">// 个位数
</span><span class="c1"></span><span class="kt">int</span> <span class="n">ge</span> <span class="o">=</span> <span class="n">i</span> <span class="o">%</span><span class="n">10</span><span class="o">;</span>
<span class="c1">// 十位数
</span><span class="c1"></span><span class="kt">int</span> <span class="n">shi</span> <span class="o">=</span> <span class="n">i</span><span class="o">/</span><span class="n">10</span><span class="o">%</span><span class="n">10</span><span class="o">;</span>
<span class="c1">//百位数
</span><span class="c1"></span><span class="kt">int</span> <span class="n">bai</span> <span class="o">=</span> <span class="n">i</span><span class="o">/</span><span class="n">10</span><span class="o">/</span><span class="n">10</span><span class="o">%</span><span class="n">10</span><span class="o">;</span>
<span class="k">if</span> <span class="o">(</span><span class="n">ge</span><span class="o">*</span><span class="n">ge</span><span class="o">*</span><span class="n">ge</span> <span class="o">+</span> <span class="n">shi</span><span class="o">*</span><span class="n">shi</span><span class="o">*</span><span class="n">shi</span> <span class="o">+</span> <span class="n">bai</span><span class="o">*</span><span class="n">bai</span><span class="o">*</span><span class="n">bai</span> <span class="o">==</span> <span class="n">i</span> <span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>案例8：打印所有的水仙花数 的和。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">999</span><span class="o">;</span><span class="n">i</span><span class="o">++</span> <span class="o">){</span>
<span class="c1">// 个位数
</span><span class="c1"></span><span class="kt">int</span> <span class="n">ge</span> <span class="o">=</span> <span class="n">i</span> <span class="o">%</span><span class="n">10</span><span class="o">;</span>
<span class="c1">// 十位数
</span><span class="c1"></span><span class="kt">int</span> <span class="n">shi</span> <span class="o">=</span> <span class="n">i</span><span class="o">/</span><span class="n">10</span><span class="o">%</span><span class="n">10</span><span class="o">;</span>
<span class="c1">//百位数
</span><span class="c1"></span><span class="kt">int</span> <span class="n">bai</span> <span class="o">=</span> <span class="n">i</span><span class="o">/</span><span class="n">10</span><span class="o">/</span><span class="n">10</span><span class="o">%</span><span class="n">10</span><span class="o">;</span>
<span class="k">if</span> <span class="o">(</span><span class="n">ge</span><span class="o">*</span><span class="n">ge</span><span class="o">*</span><span class="n">ge</span> <span class="o">+</span> <span class="n">shi</span><span class="o">*</span><span class="n">shi</span><span class="o">*</span><span class="n">shi</span> <span class="o">+</span> <span class="n">bai</span><span class="o">*</span><span class="n">bai</span><span class="o">*</span><span class="n">bai</span> <span class="o">==</span> <span class="n">i</span> <span class="o">){</span>
<span class="n">sum</span> <span class="o">+=</span><span class="n">i</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span>
</code></pre></div><p>案例9：打印所有的水仙花数 的个数。 //4</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">999</span><span class="o">;</span><span class="n">i</span><span class="o">++</span> <span class="o">){</span>
<span class="c1">// 个位数
</span><span class="c1"></span><span class="kt">int</span> <span class="n">ge</span> <span class="o">=</span> <span class="n">i</span> <span class="o">%</span><span class="n">10</span><span class="o">;</span>
<span class="c1">// 十位数
</span><span class="c1"></span><span class="kt">int</span> <span class="n">shi</span> <span class="o">=</span> <span class="n">i</span><span class="o">/</span><span class="n">10</span><span class="o">%</span><span class="n">10</span><span class="o">;</span>
<span class="c1">//百位数
</span><span class="c1"></span><span class="kt">int</span> <span class="n">bai</span> <span class="o">=</span> <span class="n">i</span><span class="o">/</span><span class="n">10</span><span class="o">/</span><span class="n">10</span><span class="o">%</span><span class="n">10</span><span class="o">;</span>
<span class="k">if</span> <span class="o">(</span><span class="n">ge</span><span class="o">*</span><span class="n">ge</span><span class="o">*</span><span class="n">ge</span> <span class="o">+</span> <span class="n">shi</span><span class="o">*</span><span class="n">shi</span><span class="o">*</span><span class="n">shi</span> <span class="o">+</span> <span class="n">bai</span><span class="o">*</span><span class="n">bai</span><span class="o">*</span><span class="n">bai</span> <span class="o">==</span> <span class="n">i</span> <span class="o">){</span>
<span class="n">count</span> <span class="o">++;</span>
<span class="o">}</span>
<span class="o">}</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
</code></pre></div><p>案例10：打印所有水仙花数 要求 每行打印2个（之前的题都是一个数占一行，现在是2个占一行）</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">999</span><span class="o">;</span><span class="n">i</span><span class="o">++</span> <span class="o">){</span>
<span class="c1">// 个位数
</span><span class="c1"></span><span class="kt">int</span> <span class="n">ge</span> <span class="o">=</span> <span class="n">i</span> <span class="o">%</span><span class="n">10</span><span class="o">;</span>
<span class="c1">// 十位数
</span><span class="c1"></span><span class="kt">int</span> <span class="n">shi</span> <span class="o">=</span> <span class="n">i</span><span class="o">/</span><span class="n">10</span><span class="o">%</span><span class="n">10</span><span class="o">;</span>
<span class="c1">//百位数
</span><span class="c1"></span><span class="kt">int</span> <span class="n">bai</span> <span class="o">=</span> <span class="n">i</span><span class="o">/</span><span class="n">10</span><span class="o">/</span><span class="n">10</span><span class="o">%</span><span class="n">10</span><span class="o">;</span>
<span class="k">if</span> <span class="o">(</span><span class="n">ge</span><span class="o">*</span><span class="n">ge</span><span class="o">*</span><span class="n">ge</span> <span class="o">+</span> <span class="n">shi</span><span class="o">*</span><span class="n">shi</span><span class="o">*</span><span class="n">shi</span> <span class="o">+</span> <span class="n">bai</span><span class="o">*</span><span class="n">bai</span><span class="o">*</span><span class="n">bai</span> <span class="o">==</span> <span class="n">i</span> <span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">&#34; &#34;</span><span class="o">);</span>
<span class="n">count</span><span class="o">++;</span>
<span class="k">if</span> <span class="o">(</span><span class="n">count</span><span class="o">%</span><span class="n">2</span><span class="o">==</span><span class="n">0</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="o">}</span>
<span class="o">}</span>
<span class="o">}</span>

<span class="cm">/*
</span><span class="cm">System.out.print(153+&#34; &#34;);
</span><span class="cm">System.out.print(370+&#34; &#34;);
</span><span class="cm">System.out.println();
</span><span class="cm">System.out.print(371+&#34; &#34;);
</span><span class="cm">System.out.print(407+&#34; &#34;);
</span><span class="cm">*/</span>

</code></pre></div><h4 id="while-">while :</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">格式</span><span class="err">：</span>
<span class="k">while</span> <span class="o">(</span><span class="n">boolean值</span><span class="o">){</span>

<span class="o">}</span>

<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;HelloWorld&#34;</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">
<span class="c1">// 如果我们想 控制循环 让循环打印有限的次数
</span><span class="c1"></span><span class="n">初始化语句</span><span class="o">;</span>
<span class="k">while</span> <span class="o">(</span><span class="n">条件表达式</span>  <span class="o">){</span>
<span class="n">循环体</span><span class="o">;</span>
<span class="n">控制循环语句</span><span class="o">;</span>
<span class="o">}</span>

<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">1</span><span class="o">;</span>
<span class="k">while</span> <span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">5</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;HelloWorld&#34;</span><span class="o">);</span>
<span class="n">i</span><span class="o">++;</span>
<span class="o">}</span>

</code></pre></div><h5 id="for循环和while循环的比较">for循环和while循环的比较：</h5>
<p>1：for循环 和while循环在任何情况下 都可以互相转换。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="k">while</span> <span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">5</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha&#34;</span><span class="o">);</span>
<span class="n">i</span><span class="o">++;</span>
<span class="o">}</span>

<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>

<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span> <span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">5</span> <span class="o">;</span>  <span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha&#34;</span><span class="o">);</span>
<span class="n">i</span><span class="o">++;</span>
<span class="o">}</span>
</code></pre></div><p>2：习惯的用途不一样，程序员们习惯这样用， 有明确范围的时候用for， 没有明确范围的时候 用while</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">案例</span><span class="err">：</span><span class="n">珠穆朗玛峰的高度</span> <span class="n">8848米</span> <span class="err">，</span><span class="n">有一张纸</span>  <span class="n">0</span><span class="o">.</span><span class="na">2毫米</span><span class="err">，</span> <span class="n">假设纸的宽度足够大</span><span class="err">，</span>  <span class="n">请问对折多少次</span> <span class="n">可以达到珠穆朗玛峰的高度</span><span class="err">。</span>
    <span class="kt">int</span> <span class="n">high</span> <span class="o">=</span> <span class="n">8848</span><span class="o">;</span>
<span class="kt">double</span> <span class="n">hou</span> <span class="o">=</span> <span class="n">0</span><span class="o">.</span><span class="na">0002</span><span class="o">;</span> <span class="c1">//米
</span><span class="c1"></span><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="k">while</span> <span class="o">(</span><span class="n">hou</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">){</span>
    <span class="n">hou</span><span class="o">*=</span><span class="n">2</span><span class="o">;</span>
    <span class="n">count</span><span class="o">++;</span>
<span class="o">}</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>

<span class="c1">// -----------------for循环
</span><span class="c1"></span><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">2</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">88480000</span> <span class="o">;</span> <span class="n">i</span><span class="o">*=</span><span class="n">2</span><span class="o">){</span>
    <span class="n">count</span> <span class="o">++;</span>
<span class="o">}</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>

</code></pre></div><h4 id="do-while-">do while :</h4>
<pre><code>格式：
do{

}while (boolean值);
//------------------
初始化语句;
do{
循环体;
控制循环语句;
}while (条件表达式 );

//特点是 先执行一次， 后续的次数正常判断执行
</code></pre><p>案例1： 打印3次HelloWorld</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">3</span> <span class="o">;</span><span class="n">i</span><span class="o">++</span> <span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;helloworld&#34;</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">//--------------
</span><span class="c1"></span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
<span class="k">while</span> <span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">3</span> <span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;helloworld&#34;</span><span class="o">);</span>
<span class="n">i</span><span class="o">++</span> <span class="o">;</span>
<span class="o">}</span>

<span class="c1">//--------------
</span><span class="c1"></span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
<span class="k">do</span><span class="o">{</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;helloworld&#34;</span><span class="o">);</span>
<span class="n">j</span><span class="o">++</span> <span class="o">;</span>
<span class="o">}</span>
<span class="k">while</span> <span class="o">(</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">3</span><span class="o">);</span> <span class="c1">//???
</span></code></pre></div><p>案例2：打印0次HelloWorld</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">0</span> <span class="o">;</span><span class="n">i</span><span class="o">++</span> <span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;helloworld&#34;</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">//--------------
</span><span class="c1"></span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
<span class="k">while</span> <span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">0</span> <span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;helloworld&#34;</span><span class="o">);</span>
<span class="n">i</span><span class="o">++</span> <span class="o">;</span>
<span class="o">}</span>

<span class="c1">//dowhile循环 至少打印一次
</span><span class="c1"></span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
<span class="k">do</span><span class="o">{</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;helloworld&#34;</span><span class="o">);</span>
<span class="n">j</span><span class="o">++</span> <span class="o">;</span>
<span class="o">}</span>
<span class="k">while</span> <span class="o">(</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">0</span><span class="o">);</span>
</code></pre></div><p>应用案例：
键盘录入一个 整数
判断如果这个数不在这个1-100这个范围，就让他重新录入，
不管用户录入多少次，直到录入正确为止。
Scanner sc = new Scanner(System.in);</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="cm">/*
</span><span class="cm">int a = sc.nextInt(); // a是用户录入的数
</span><span class="cm">if (a&lt;1 || a&gt;100){
</span><span class="cm">a = sc.nextInt();
</span><span class="cm">if (a&lt;1 || a&gt;100){
</span><span class="cm">a = sc.nextInt();
</span><span class="cm">if (a&lt;1 || a&gt;100){
</span><span class="cm">a = sc.nextInt();
</span><span class="cm">if (a&lt;1 || a&gt;100){
</span><span class="cm">a = sc.nextInt();
</span><span class="cm">if (a&lt;1 || a&gt;100){
</span><span class="cm">a = sc.nextInt();
</span><span class="cm">}
</span><span class="cm">}
</span><span class="cm">}
</span><span class="cm">}
</span><span class="cm">}
</span><span class="cm">*/</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 循环优化
</span><span class="c1"></span><span class="cm">/*
</span><span class="cm">int a = sc.nextInt(); 
</span><span class="cm">while (a&lt;1 || a&gt;100){
</span><span class="cm">a = sc.nextInt();
</span><span class="cm">}
</span><span class="cm">*/</span>

<span class="c1">// 上面循环有何不妥？？ 循环是为了去掉重复，但是我感觉 你的nextInt重复了。
</span><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">;</span>
<span class="k">do</span><span class="o">{</span>
<span class="n">a</span><span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
<span class="o">}</span><span class="k">while</span> <span class="o">(</span><span class="n">a</span><span class="o">&lt;</span><span class="n">1</span> <span class="o">||</span> <span class="n">a</span><span class="o">&gt;</span><span class="n">100</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</code></pre></div><p>三者循环的死循环格式：</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">for</span> <span class="o">(;</span> <span class="o">;</span> <span class="o">){</span>

<span class="o">}</span>

<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">){</span>

<span class="o">}</span>

<span class="k">do</span><span class="o">{</span>

<span class="o">}</span>
<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</code></pre></div><h3 id="循环中断语句">循环中断语句：</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">continue</span> <span class="o">:</span> <span class="n">只能写在循环中</span><span class="err">。</span>
    <span class="n">跳过本次循环</span><span class="err">，</span> <span class="n">后续的循环继续</span><span class="err">。</span>
    <span class="n">continue的正确用法</span><span class="err">：</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">10</span> <span class="o">;</span><span class="n">i</span><span class="o">++</span> <span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span><span class="n">4</span><span class="o">){</span>
            <span class="k">continue</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>	  <span class="c1">// 4 就不打印了。
</span><span class="c1"></span>    <span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">continue的错误用法</span><span class="err">：</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">10</span> <span class="o">;</span><span class="n">i</span><span class="o">++</span> <span class="o">){</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>  <span class="c1">// 依然会打印 4
</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span><span class="n">4</span><span class="o">){</span>
            <span class="k">continue</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div><p>break : 只能写在switch和循环中。终止循环。 不再循环了。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">18</span> <span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span><span class="n">60</span><span class="o">){</span>
<span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">&#34;工作&#34;</span><span class="o">);</span>   <span class="c1">// 59岁干完之后， 60岁不干了。
</span><span class="c1"></span><span class="o">}</span>


<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">18</span> <span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">&#34;工作&#34;</span><span class="o">);</span>   <span class="c1">// 60岁 干完  后面才不干的。
</span><span class="c1"></span><span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span><span class="n">60</span><span class="o">){</span>
<span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>带标号的循环：</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nl">a:</span><span class="k">for</span> <span class="o">(;</span> <span class="o">;</span> <span class="o">){</span>
<span class="nl">b:</span><span class="k">switch</span> <span class="o">(){</span>
<span class="k">case</span> <span class="o">:</span>
<span class="k">break</span> <span class="n">a</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>生成随机数：</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 导包
</span><span class="c1"></span><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="c1">// 创建Random对象
</span><span class="c1"></span><span class="n">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>

<span class="c1">// 生成随机数 
</span><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">100</span><span class="o">);</span> <span class="c1">//[0-99]
</span><span class="c1"></span><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">101</span><span class="o">);</span> <span class="c1">//[0-100]
</span><span class="c1"></span>
<span class="c1">// 如果我要生成1-100的随机数呢
</span><span class="c1"></span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">100</span><span class="o">)+</span><span class="n">1</span><span class="o">;</span> <span class="c1">//[0-99]+1 =[1-100]
</span><span class="c1"></span><span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>综合案例：猜数字小游戏</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">        <span class="kn">package</span> <span class="nn">com.guodong.Demo</span><span class="o">;</span>

        <span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
        <span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

        <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>


        <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">100</span><span class="o">)+</span><span class="n">1</span><span class="o">;</span>
<span class="nl">
</span><span class="nl">      lo:</span>  <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
          <span class="n">lo1</span><span class="o">:</span> <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;请输入1-100的数字：&#34;</span><span class="o">);</span>
                <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
                <span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">&gt;</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;大了&#34;</span><span class="o">);</span>
                    <span class="k">break</span> <span class="n">lo1</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">&lt;</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;小了&#34;</span><span class="o">);</span>
                    <span class="k">break</span> <span class="n">lo1</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">==</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;猜对了！！答案是：&#34;</span> <span class="o">+</span> <span class="n">number</span><span class="o">);</span>
                    <span class="k">break</span> <span class="n">lo</span><span class="o">;</span>
                <span class="o">}</span>

            <span class="o">}</span>
        <span class="o">}</span>

        <span class="o">}</span>

        <span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-JAVA" data-lang="JAVA"><span class="n">计算优先级问题</span><span class="err">：</span>
	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="kc">false</span> <span class="o">||</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="kc">false</span><span class="o">);</span><span class="c1">//
</span><span class="c1"></span>					<span class="c1">//  true&amp;&amp;false 
</span><span class="c1"></span>					<span class="c1">// false
</span><span class="c1"></span>	
	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="kc">true</span> <span class="o">||</span> <span class="kc">false</span><span class="o">);</span><span class="c1">//
</span><span class="c1"></span>

	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">10</span> <span class="o">+</span> <span class="n">20</span> <span class="o">+</span><span class="n">30</span><span class="o">);</span><span class="c1">//60
</span><span class="c1"></span>					<span class="c1">// 30 +30
</span><span class="c1"></span>					<span class="c1">// 60
</span><span class="c1"></span>					<span class="c1">// 同优先级的运算符 从左往右运算的。
</span><span class="c1"></span>
	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">10</span> <span class="o">+</span> <span class="n">20</span> <span class="o">+</span><span class="n">30</span><span class="o">/</span><span class="n">3</span><span class="o">);</span>
					<span class="c1">// 10+20 +10
</span><span class="c1"></span>					<span class="c1">// 30 +10
</span><span class="c1"></span>					<span class="c1">// 40
</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Day2 运算符与逻辑语句</title>
			<link>https://demon-github1996.github.io/posts/day02/</link>
			<pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate>
			
			<guid>https://demon-github1996.github.io/posts/day02/</guid>
			<description>Day2 运算符与逻辑语句 昨日回顾： ​	java的介绍 ​	java是一门语言 ​	java的火 ​	jdk ​	jdk的下载和安装 ​	HelloWorld程序 ​	dos窗口 ​	环境变量 ​	HelloWorld编写编译和运行 ​	HelloWorld的详细的解释 ​	书写习惯 ​	notepad++ ​	java的基本语法 ​	程序的基本组成单位：
//dfsakdjfhad class HelloWorld { public static void main(String[] args){ int a = 10; System.out.println(a); { int b =10; System.out.println(b); } } } ​	注释 ​	关键字 ​	标识符 ​	数据 ​	常量 10 ​	变量
​	注释 ​	关键字 ​	标识符 ​	数据 ​	常量 10 ​	变量</description>
			<content type="html"><![CDATA[<h1 id="day2-运算符与逻辑语句">Day2 运算符与逻辑语句</h1>
<h2 id="昨日回顾">昨日回顾：</h2>
<p>​	java的介绍
​		java是一门语言
​		java的火
​		jdk
​		jdk的下载和安装
​	HelloWorld程序
​		dos窗口
​		环境变量
​		HelloWorld编写编译和运行
​		HelloWorld的详细的解释
​		书写习惯
​		notepad++
​	java的基本语法
​		程序的基本组成单位：</p>
<div class="highlight"><pre class="chroma"><code class="language-JAVA" data-lang="JAVA"><span class="c1">//dfsakdjfhad
</span><span class="c1"></span><span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
<span class="o">{</span>
 <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span><span class="n">10</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
     <span class="o">}</span>
     <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>​		注释
​		关键字 
​		标识符 
​		数据
​			常量 10
​			变量</p>
<p>​		注释
​		关键字 
​		标识符 
​		数据
​			常量 10
​			变量</p>
<p>​		符号：
​			基本符号：
​				空格 ： 所有的关键字 标识符 中间都需要用空格隔开。
​				{}  : 用来盛多条语句的  表示一个范围。
​				;  一个分号是一条语句
​				() :  强制转换
​					  运算 
​					  方法
​					  逻辑语句
​				[] ： 数组
​				&quot;&rdquo; 字符串
​				'&rsquo; 字符
​				.  表示调用的过程
​				
​			运算符：</p>
<h2 id="类型转换">类型转换(☆☆☆☆☆)</h2>
<h3 id="隐式类型转换">隐式类型转换：</h3>
<p>​			<!-- raw HTML omitted --><strong>规则： 是从小范围的数据类型 直接转到 大范围的数据类型</strong><!-- raw HTML omitted -->
​			范围的排序：
​</p>
<pre><code>byte &lt; short = char &lt; int &lt; long &lt; float &lt; double 
举例：
int a =10;
long b = a; 
</code></pre><p>​		
​		用途： 比如两个软件进行交互， 对方发给你一个整数， 我就需要用long类型去接收。因为你不确定他给传的是一个多大的证书，
​			所以你应该  不管他发给你多大的证书， 你都应该接收， 你就可以用 最大的整数类型 long去接收。
​		
​		运行中的隐式类型转换： （运算的原理： 不同的数据类型进行运算，必须先统一为同一种类型才可以运算，否则不能运算。）
​			<strong>1：比int大(或者等于)的类型， 在进行运算的时候， 小类型会自动提升为大类型进行运算：</strong>
​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
			<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
				<span class="kt">long</span> <span class="n">lo</span> <span class="o">=</span> <span class="n">10L</span><span class="o">;</span>
				<span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="n">3</span><span class="o">.</span><span class="na">14</span><span class="o">;</span>
<span class="c1">//long lon = lo + d; // 编译报错。   lo会先提升为 double类型。然后再和 double类型的d进行运算 最后的结果是double类型。
</span><span class="c1"></span>						<span class="c1">//long lon = (long) lo + d; // 编译报错 
</span><span class="c1"></span>						<span class="kt">long</span> <span class="n">lon</span> <span class="o">=</span> <span class="o">(</span><span class="kt">long</span><span class="o">)(</span><span class="n">lo</span> <span class="o">+</span><span class="n">d</span><span class="o">)</span> <span class="o">;</span> <span class="c1">// 正确
</span><span class="c1"></span>
<span class="err">​</span>						<span class="kt">double</span> <span class="n">d1</span> <span class="o">=</span> <span class="n">lo</span> <span class="o">+</span> <span class="n">d</span><span class="o">;</span> <span class="c1">// 正确。
</span><span class="c1"></span><span class="err">​</span>					<span class="o">}</span>
<span class="err">​</span>				<span class="o">}</span>
</code></pre></div><p>​			<strong>2：比int小的数据类型， 在进行运算的时候，所有的都要提升为 int类型 再去运算。</strong>
​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="err">​</span>	<span class="kt">byte</span> <span class="n">b</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="err">​</span>	<span class="kt">short</span> <span class="n">s</span><span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="c1">//short sh = b +s; // 编译报错  b 和s 都会提升为int类型  所以最后的结果也是int类型。
</span><span class="c1">//short sh = (short) b + s ; // 编译报错
</span><span class="c1"></span><span class="err">​</span>	<span class="kt">short</span> <span class="n">sh</span> <span class="o">=</span> <span class="o">(</span><span class="kt">short</span><span class="o">)(</span><span class="n">b</span><span class="o">+</span><span class="n">s</span><span class="o">);</span> <span class="c1">// 正确的
</span><span class="c1"></span>
<span class="err">​</span>	<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="o">+</span><span class="n">s</span><span class="o">;</span> <span class="c1">// 正确的。
</span><span class="c1"></span><span class="err">​</span>	<span class="o">}</span>
<span class="o">}</span>

<span class="err">​</span>	
</code></pre></div><h3 id="强制类型转换">强制类型转换：</h3>
<p>​		<strong>规则： 是从大范围的数据类型 强制转到 小范围的数据类型</strong>
​			<strong>1：明确能转过去，数据是正确的， 这时候可以强制类型转换。</strong>
​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
    <span class="kt">byte</span> <span class="n">b</span> <span class="o">=</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span><span class="n">a</span><span class="o">;</span> 
</code></pre></div><p>​			<strong>2：不推荐你使用的，  明知道转过去 撑不了这么大的数据， 还要继续转</strong>
​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">200</span><span class="o">;</span>
    <span class="kt">byte</span> <span class="n">b</span> <span class="o">=</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span><span class="n">a</span><span class="o">;</span>  <span class="c1">// a 已经不是200了，    不确定的数字
</span></code></pre></div><p>​			<strong>3：强化去除小数点后面的数据</strong>
​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="n">3</span><span class="o">.</span><span class="na">14</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">d</span><span class="o">;</span> <span class="c1">// a 就是3了。
</span></code></pre></div><p>​</p>
<h3 id="类型转换的注意事项">类型转换的注意事项：</h3>
<p>​		<strong>1：boolean类型 不参与任何的类型转换</strong>
​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="kt">boolean</span> <span class="n">b</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span> <span class="c1">// 编译报错。
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">b</span><span class="o">;</span>
		
</code></pre></div><pre><code>**2 :常量优化机制**
</code></pre>
<p>​		1：	写一个整数常量的时候， 整数常量也是有数据类型的，默认是 int类型，</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">10</span><span class="o">);</span> <span class="c1">// 10 是常量 同时也是int类型的数据
</span></code></pre></div><p>​		2：	比int小的类型 才有常量优化机制：</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">				<span class="kt">byte</span> <span class="n">a</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span> <span class="c1">// 正确的。 100虽然是int类不假，依然可以赋值， 这就叫做常量优化机制。
</span><span class="c1"></span>				<span class="c1">// 底层 byte a = (byte)100;
</span><span class="c1"></span>
<span class="err">​</span>				<span class="c1">// 只能是常量有 优化机制
</span><span class="c1"></span><span class="err">​</span>				<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="err">​</span>				<span class="c1">//byte c = b; // 编译错误  b 是变量 不是常量。
</span><span class="c1"></span>
<span class="err">​</span>				<span class="kt">byte</span> <span class="n">d</span> <span class="o">=</span> <span class="n">100</span><span class="o">+</span><span class="n">20</span><span class="o">;</span> <span class="c1">// 正确的  常量的运算， 在编译成class期间， 就已经把 100+20  变成了120 
</span><span class="c1"></span><span class="err">​</span>					<span class="c1">// 也就是说 等这句话翻译到了class文件里面 就变成了 byte d = 120; // 就又符合常量优化机制了。
</span><span class="c1"></span>
<span class="err">​</span>				<span class="kt">byte</span> <span class="n">e</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="err">​</span>				<span class="kt">byte</span> <span class="n">f</span> <span class="o">=</span> <span class="n">e</span><span class="o">+</span><span class="n">20</span> <span class="o">;</span> <span class="c1">// 编译报错。  e是变量
</span></code></pre></div><p>​		3：	写一个小数常量的时候，小数常量也是有数据类型的， double类型。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">31</span><span class="o">.</span><span class="na">4</span><span class="o">);</span> <span class="c1">// 31.4 是常量  同时也是 double数据类型的。
</span><span class="c1"></span>				<span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="n">31</span><span class="o">.</span><span class="na">4</span><span class="o">;</span>
<span class="c1">//float f = 31.4 ; // 编译报错。 比int大的类型 没有常量优化机制。  所以double类型不能直接赋值给 float类型。
</span><span class="c1"></span><span class="err">​</span>				<span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span><span class="n">31</span><span class="o">.</span><span class="na">4</span><span class="o">;</span>
<span class="err">​</span>				
<span class="err">​</span>				<span class="kt">float</span> <span class="n">fl</span> <span class="o">=</span> <span class="n">31</span><span class="o">.</span><span class="na">4F</span><span class="o">;</span> <span class="c1">// 你31.4 默认是double类型， 能不能我们写一个小数的时候 让他默认是 float类型呢， 当然可以了， 你只要在小数后面加一个F 那么这个小数 就会被当做float类型啦。
</span></code></pre></div><p>​		4： long类型的数据后面 为什么要加L</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
				<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
					<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
					<span class="kt">long</span> <span class="n">lo</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span> <span class="c1">// 正确 隐式类型转换
</span><span class="c1"></span>
<span class="err">​</span>					<span class="kt">long</span> <span class="n">lon</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span> <span class="c1">// 正确。  既然是正确的 那么为什么老师一直说 让我在long类型的数据后面 加一个L呢 实在不懂。
</span><span class="c1"></span>
<span class="err">​</span>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">100</span><span class="o">);</span> <span class="c1">// 100 是int类型
</span><span class="c1"></span>
<span class="err">​</span>					<span class="c1">//System.out.println(10000000000); //100亿   int类型  （int类型的数据 最大到21亿左右）
</span><span class="c1"></span><span class="err">​</span>					<span class="c1">// 此时 报错了，  100亿已经超过了int数据类型
</span><span class="c1"></span><span class="err">​</span>					<span class="c1">// 但是 直接写一个 整数常量 确实就是int类型的啊， 所以肯定报错。
</span><span class="c1"></span><span class="err">​</span>					<span class="c1">// 所以 我们就想 我们能不能写一个整数的时候 让jvm把他当做是一个long类型的数据呢，而不是int呢， 可以啊 你只需要在数据后面加一个 L就可以了。
</span><span class="c1"></span>
<span class="err">​</span>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">10000000000L</span><span class="o">);</span>

<span class="err">​</span>					<span class="kt">long</span> <span class="n">lo</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
<span class="err">​</span>				<span class="o">}</span>	
<span class="err">​</span>			<span class="o">}</span>
</code></pre></div><h2 id="运算符">运算符(☆☆☆☆☆)</h2>
<h3 id="算术运算符">算术运算符</h3>
<h4 id="基本算术运算符-">基本算术运算符：+-*/%</h4>
<pre><code>   + ​				
 				 System.out.println(10+10); //20
     ​			
   		 		 System.out.println(+10); // 10  正10
     ​			

​			-
​				System.out.println(10-5); //5
​				System.out.println(-5); // -5  负5
​			
​			/ :
​				System.out.println(10/4); //2
​				System.out.println(10/4.0); //2.5
​				System.out.println(10.0/4); //2.5
​				System.out.println(10.0/4.0); //2.5

​				// 结论： 整数相除得到的是整数，要想得到小数 就必须让小数参与运算。

​				// 为什么？？ 两种不同的数据类型 是没有办法运算的，所以必须先统一为同一种类型再进行运算
​					System.out.println(10/4); //2  10是int类型 4也是int类型 最终结果就应该是int类型
​					System.out.println(10/4.0);  //2.5  10 先转换为 double的10.0 
​			
​			% ： 
​				System.out.println(10%3); //1
​				System.out.println(10%-3);//1
​				System.out.println(-10%3);// -1
​				System.out.println(-10%-3); // -1

​				// 结论： 取的这个余数， 符号和 %左侧的数的符号 是一至的。

​				// 为什么？
​					System.out.println(10%3);   // 10/3 = 3      10 - (3*3) = 1;
​					System.out.println(10%-3);  // 10/-3 =-3     10 - (-3*-3) = 1;
</code></pre><h3 id="字符--码表">字符&ndash;码表：</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span> 
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">//97			
</span></code></pre></div><p>​			ASCII编码：
​				&lsquo;a&rsquo; &ndash;97
​				&lsquo;A&rsquo; &ndash;65
​				&lsquo;0&rsquo; &ndash;48</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>   <span class="c1">// 98
</span><span class="c1">// 报错  // 当时你说报错 是因为 字符和数字就加不了，  现在告诉你了 可以加
</span><span class="c1">// a1   //  c 是char类型， 1是int类型， 两个进行运算 必须统一为同一种类型， char会自动提升为int类型。 
</span><span class="c1">// b   // 结构是98  并没有转换回 char类型。
</span><span class="c1"></span><span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="o">;</span>
<span class="kt">char</span> <span class="n">d</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="sc">&#39;a&#39;</span><span class="o">+</span><span class="n">1</span><span class="o">);</span> <span class="c1">//b
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">d</span><span class="o">);</span> <span class="c1">//b
</span><span class="c1">// 96  // 你记成了 a是95了。
</span></code></pre></div><p>​</p>
<h4 id="字符串操作">字符串+操作：</h4>
<p>​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;a&#34;</span> <span class="o">+</span> <span class="n">1</span><span class="o">);</span> <span class="c1">//  同样的道理 两个数据进行运算 必须统一为同一种类型
</span><span class="c1"></span><span class="err">​</span>										<span class="c1">// 无论什么类型 和字符串进行+运算 所有类型都必须转换为 字符串类型。 在和字符串进行运算(拼接)
</span><span class="c1"></span>    <span class="err">​</span>										<span class="c1">// a1
</span><span class="c1"></span>
    <span class="err">​</span>			<span class="n">题目</span><span class="err">：</span><span class="n">请猜测他的输出结果</span>
    <span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">10</span><span class="o">+</span><span class="n">10</span><span class="o">+</span><span class="n">20</span><span class="o">+</span><span class="s">&#34;java&#34;</span><span class="o">+</span><span class="n">20</span><span class="o">+</span><span class="n">20</span><span class="o">+</span><span class="s">&#34;javaEE&#34;</span><span class="o">+(</span><span class="n">20</span><span class="o">+</span><span class="n">20</span><span class="o">)+</span><span class="s">&#34;havaee&#34;</span><span class="o">+</span><span class="n">10</span><span class="o">+(</span><span class="n">10</span><span class="o">+</span><span class="n">20</span><span class="o">)+</span><span class="n">30</span><span class="o">);</span>
<span class="err">​</span>								<span class="c1">// 10+10+20+&#34;java&#34;+20+20+&#34;javaEE&#34;+40+&#34;havaee&#34;+10+30+30
</span><span class="c1"></span>    <span class="err">​</span>								<span class="c1">// &#34;40java2020javaEE40havaee103030&#34;
</span><span class="c1"></span>
    <span class="err">​</span>			<span class="n">题目</span><span class="err">：</span>
    <span class="err">​</span>				<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="err">​</span>				<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
    <span class="err">​</span>					<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="err">​</span>						<span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="err">​</span>						<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="err">​</span>						<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="err">​</span>						<span class="c1">// 请补齐后面的代码 需求： 当用户输入 第一个数4  第二个数5的时候，  黑窗口显示  4*5=20 
</span><span class="c1"></span>            <span class="err">​</span>						<span class="c1">//........
</span><span class="c1"></span>            <span class="err">​</span>						<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="s">&#34;*&#34;</span><span class="o">+</span><span class="n">b</span><span class="o">+</span><span class="s">&#34;=&#34;</span><span class="o">+(</span><span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="o">));</span>
        <span class="err">​</span>					<span class="o">}</span>
    <span class="err">​</span>				<span class="o">}</span>
</code></pre></div><h3 id="自增自减运算符">自增自减运算符：</h3>
<pre><code>			// ++  自身增加1   -- 自身减少1
​	
​			/*
​			// 不管++ 放在后面 还是放在前面  只要这个变量经过一次++运算  那么这个变量自己就会增加1
​			int a  = 10;
​			a++;
​			System.out.println(a); //11

​			//20++;
​			//System.out.println(20);

​			int b = 10;
​			++b;
​			System.out.println(b);  //11

​			*/
</code></pre><p>​			<strong>表达式的概念</strong> 
​			 <strong>用运算符连接起来的式子 叫做 表达式。</strong><br>
​			 <strong>表达式 有两个特点  1：一般不能单独成语句   2： 表达式会有一个结果。</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
        <span class="err">​</span>			<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
        <span class="err">​</span>			<span class="c1">//a+b; // 报错 不是语句
</span><span class="c1"></span>        <span class="err">​</span>			<span class="c1">//30; // 报错 不是语句
</span><span class="c1"></span>
        <span class="err">​</span>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">30</span><span class="o">);</span>
        <span class="err">​</span>			<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">30</span><span class="o">;</span>

        <span class="err">​</span>			<span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">;</span>   <span class="c1">// 运算符是有优先级的。  先算乘除后算甲减 有小伙好的先算小括号。
</span><span class="c1"></span>        <span class="err">​</span>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">d</span><span class="o">);</span> <span class="c1">//30
</span><span class="c1"></span>
        <span class="err">​</span>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;============&#34;</span><span class="o">);</span>
        <span class="err">​</span>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">);</span>

        <span class="err">​</span>			<span class="c1">//=================
</span><span class="c1"></span>        <span class="err">​</span>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;---------------&#34;</span><span class="o">);</span>
        <span class="err">​</span>			<span class="c1">// 同理  ++ 和-- 他们链接起来的式子 也是表达式。
</span><span class="c1"></span>        <span class="err">​</span>			<span class="kt">int</span> <span class="n">e</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
        <span class="err">​</span>			<span class="kt">int</span> <span class="n">f</span> <span class="o">=</span> <span class="n">e</span><span class="o">++;</span>  <span class="c1">// ++放后面  整体表达式的结果取的是变量+1之前的值。
</span><span class="c1"></span>        <span class="err">​</span>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">);</span> <span class="c1">//10
</span><span class="c1"></span>        <span class="err">​</span>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span> <span class="c1">//11
</span><span class="c1"></span>
        <span class="err">​</span>			<span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
        <span class="err">​</span>			<span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="o">++</span><span class="n">g</span><span class="o">;</span>  <span class="c1">// ++放前面  整体表达式的结果取的是变量+1之后的值。
</span><span class="c1"></span>        <span class="err">​</span>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">h</span><span class="o">);</span> <span class="c1">//11	
</span><span class="c1"></span>        <span class="err">​</span>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">g</span><span class="o">);</span> <span class="c1">//11
</span></code></pre></div><p>​			// ++ 无论放在前面还是后面，  只要经过++ ，自身绝对会增加1
​			// 放前面和放后面 不同的是
​				// 整体表达式的结果不同。
​					//++放后面  整体表达式的结果取的是变量+1之前的值。
​					//++放前面  整体表达式的结果取的是变量+1之后的值</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">//	题目1：
</span><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="c1">//10     11	 9
</span><span class="c1"></span><span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">a</span><span class="o">++</span> <span class="o">+</span> <span class="o">++</span><span class="n">b</span> <span class="o">+</span> <span class="o">--</span><span class="n">c</span><span class="o">;</span>
<span class="c1">//d = 
</span><span class="c1">//	表达式的结果
</span><span class="c1">//	= 表达式1 + 表达式2 + 表达式3
</span><span class="c1"></span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">//11
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span> <span class="c1">//11
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">);</span> <span class="c1">//9
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">d</span><span class="o">);</span> <span class="c1">//30
</span></code></pre></div><p>​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">//	题目2：
</span><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="c1">//10    10	10		9	  8   10
</span><span class="c1"></span><span class="kt">int</span> <span class="n">e</span> <span class="o">=</span> <span class="n">a</span><span class="o">++</span> <span class="o">+</span> <span class="n">b</span><span class="o">++</span> <span class="o">+</span> <span class="n">c</span><span class="o">--</span> <span class="o">+</span> <span class="o">--</span><span class="n">d</span> <span class="o">+</span> <span class="o">--</span><span class="n">c</span><span class="o">+</span> <span class="o">++</span><span class="n">d</span><span class="o">;</span>
<span class="c1">//a=11  b=11  c=9   d=9   c=8   d=10
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">//11
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span> <span class="c1">//11
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">);</span> <span class="c1">//8
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">d</span><span class="o">);</span> <span class="c1">//10
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span> <span class="c1">//57
</span></code></pre></div><h3 id="赋值运算符">赋值运算符：</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">//	普通赋值运算符 =
</span><span class="c1"></span><span class="err">​</span>			<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="err">​</span>		
    <span class="err">​</span>	<span class="c1">//	复合赋值运算符：
</span><span class="c1"></span>    <span class="err">​</span>			<span class="o">+=</span> <span class="o">-=</span> <span class="o">*=</span> <span class="o">/=</span> <span class="o">%=</span>

    <span class="err">​</span>		<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="err">​</span>			<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="err">​</span>			<span class="n">b</span> <span class="o">+=</span> <span class="n">a</span><span class="o">;</span> <span class="c1">// b = b+a; // 30
</span><span class="c1"></span><span class="err">​</span>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span> <span class="c1">//30
</span><span class="c1"></span>
<span class="err">​</span>			<span class="n">注意</span><span class="err">：</span> <span class="n">复合赋值运算符</span> <span class="n">底层有一个强制类型转换的动作</span><span class="err">。</span>
    <span class="err">​</span>			<span class="kt">short</span> <span class="n">s</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="err">​</span>				<span class="kt">byte</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="err">​</span>				<span class="n">b</span><span class="o">+=</span><span class="n">s</span><span class="o">;</span> <span class="c1">// 正确的  底层 b = (byte)(b+s);  // b 先转为int类型   s也转为int类型 相加之后是int类型  但是  强制类型转为了 byte
</span><span class="c1"></span><span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</code></pre></div><h3 id="比较运算符">比较运算符</h3>
<p>比较运算的结果全部都是boolean类型的数据。</p>
<pre><code>        &gt; &lt; &gt;= &lt;= == !=
</code></pre>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
    <span class="c1">//  a&gt;b; // 表达式不能单独成语句。 
</span><span class="c1"></span>    <span class="c1">// false;
</span><span class="c1"></span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="o">);</span> <span class="c1">// false 
</span><span class="c1"></span>    <span class="kt">boolean</span> <span class="n">bo</span> <span class="o">=</span> <span class="n">a</span><span class="o">&gt;</span><span class="n">b</span> <span class="o">;</span> <span class="c1">// false
</span></code></pre></div><h3 id="逻辑运算符">逻辑运算符</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="cm">/*	a 在 0 - 100的范围吗？
</span><span class="cm">​			System.out.println( 0&lt;a &amp; a&lt;100 );
</span><span class="cm">
</span><span class="cm">​		&amp; : 并且的意思
</span><span class="cm">​			一箱酒(两瓶)，里面有一瓶真酒 有一瓶假酒  ，请问你认为 这一箱酒是真的还是假的， 你肯定认为是假的 不买。
</span><span class="cm">​			
</span><span class="cm">​			并且， 有假则假。  有false则false
</span><span class="cm">​		
</span><span class="cm">​		| ： 或者的意思
</span><span class="cm">​			我两只手 每一只收里面有一个苹果， 一个是好苹果 另一个是烂苹果， 请问你选哪一个。  肯定选好的。
</span><span class="cm">​			
</span><span class="cm">​			或者， 有真则真，  有true 则true
</span><span class="cm">​		
</span><span class="cm">​		^ : 异或  异 ：不同   ， 或：通假字 惑  疑惑。    意思：疑惑是否不同吗
</span><span class="cm">
</span><span class="cm">​			如果是 不同，  true，  不是 false*/</span>

<span class="err">​</span>			<span class="kc">true</span> <span class="o">^</span> <span class="kc">true</span>  <span class="o">----</span><span class="kc">false</span> 
    <span class="err">​</span>		<span class="kc">false</span> <span class="o">^</span> <span class="kc">true</span>  <span class="o">---</span><span class="kc">true</span>

    <span class="err">​</span>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="kc">true</span> <span class="o">!=</span> <span class="kc">true</span><span class="o">);</span> <span class="c1">//false
</span><span class="c1"></span><span class="err">​</span>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="sc">&#39;a&#39;</span><span class="o">!=</span><span class="sc">&#39;b&#39;</span><span class="o">);</span> <span class="c1">//true
</span><span class="c1"></span><span class="err">​</span>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">10</span><span class="o">!=</span><span class="n">20</span><span class="o">);</span> <span class="c1">//true
</span><span class="c1"></span><span class="o">!</span> <span class="o">:</span> <span class="n">取反</span><span class="err">。</span>
</code></pre></div><h3 id="短路逻辑运算符">短路逻辑运算符：</h3>
<p>​		&amp;&amp; 和&amp; 的结果是一样的。
​		&amp;&amp; 效率高。<br>
​		并且， 有false则false。 如果左侧看到false了  右侧就不执行了。
​</p>
<p>​		|| 和| 的结果是一样的。
​		|| 效率高。<br>
​		或者， 有true则true。 如果左侧看到true了  右侧就不执行了。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
<span class="c1">//System.out.println(a&gt;100 &amp;&amp; b++); // &amp;&amp; 逻辑运算  只能运算 boolean类型的数据。
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">100</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="o">++</span> <span class="o">&gt;</span><span class="n">0</span><span class="o">);</span> 
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</code></pre></div><h3 id="三元运算符">三元运算符:</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">
<span class="c1">//一元运算符： 元是元素的意思， 参与运算的元素最多是1个
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(+</span><span class="n">10</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(-</span><span class="n">10</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="n">a</span><span class="o">++;</span>
<span class="o">--</span><span class="n">a</span><span class="o">;</span>

<span class="c1">//二元运算符：
</span><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="kc">true</span><span class="o">&amp;</span><span class="kc">false</span><span class="o">);</span>

<span class="c1">//三元运算符：
</span><span class="c1">//格式： 关系表达式? 表达式1 : 表达式2; 
</span><span class="c1"></span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>

<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&gt;</span><span class="n">b</span> <span class="o">?</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span> <span class="o">:</span> <span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">);</span> <span class="c1">//-10
</span><span class="c1"></span>
<span class="c1">// a&gt;b? a+b:a-b;  //编译错误的  表达式不能成语句
</span><span class="c1">// -10;
</span><span class="c1"></span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">a</span><span class="o">&gt;</span><span class="n">b</span><span class="o">?</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">:</span><span class="n">a</span><span class="o">-</span><span class="n">b</span> <span class="o">);</span>

<span class="c1">//案例：
</span><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">a</span><span class="o">&gt;</span><span class="n">b</span> <span class="o">?</span> <span class="n">a</span> <span class="o">:</span> <span class="n">b</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>

<span class="c1">//案例：键盘录入三个数， 使用三元运算符 求出 三个数中最大的那个值。
</span><span class="c1"></span><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

        <span class="kt">int</span> <span class="n">temp</span>  <span class="o">=</span> <span class="n">a</span><span class="o">&gt;</span> <span class="n">b</span> <span class="o">?</span> <span class="n">a</span> <span class="o">:</span><span class="n">b</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">&gt;</span> <span class="n">c</span> <span class="o">?</span> <span class="n">temp</span> <span class="o">:</span> <span class="n">c</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">max1</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&gt;</span><span class="n">b</span> <span class="o">?</span> <span class="o">(</span><span class="n">a</span><span class="o">&gt;</span><span class="n">c</span><span class="o">?</span><span class="n">a</span><span class="o">:</span><span class="n">c</span><span class="o">)</span> <span class="o">:</span> <span class="o">(</span><span class="n">b</span><span class="o">&gt;</span><span class="n">c</span><span class="o">?</span><span class="n">b</span><span class="o">:</span><span class="n">c</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max1</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h2 id="逻辑语句">逻辑语句(☆☆☆☆☆)</h2>
<h3 id="顺序结构">顺序结构</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha1&#34;</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha1&#34;</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha1&#34;</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha1&#34;</span><span class="o">);</span>
</code></pre></div><h3 id="选择结构">选择结构</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha1&#34;</span><span class="o">);</span>				
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha1&#34;</span><span class="o">);</span><span class="c1">// 选择性的执行。
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha1&#34;</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha1&#34;</span><span class="o">);</span>

<span class="k">if</span>
<span class="n">三种格式</span><span class="err">：</span>
<span class="k">if</span> <span class="n">第一种格式</span>
<span class="nf">if</span> <span class="o">(</span><span class="n">条件表达式</span><span class="o">){</span>
<span class="n">语句体</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">//举例：
</span><span class="c1"></span><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
<span class="k">if</span> <span class="o">(</span><span class="n">score</span> <span class="o">&gt;</span> <span class="n">60</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;及格&#34;</span><span class="o">);</span>
<span class="o">}</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;结束&#34;</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*
</span><span class="cm">if第二种格式
</span><span class="cm">if (条件表达式){
</span><span class="cm">语句体1;
</span><span class="cm">}else{
</span><span class="cm">语句体2;
</span><span class="cm">}
</span><span class="cm">*/</span>

<span class="c1">//举例：
</span><span class="c1"></span><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
<span class="k">if</span> <span class="o">(</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="n">60</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;及格&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span><span class="o">{</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;不及格&#34;</span><span class="o">);</span>
<span class="o">}</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;结束&#34;</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>

<span class="k">if</span> <span class="n">第三种格式</span>
<span class="nf">if</span> <span class="o">(</span><span class="n">条件表达式1</span><span class="o">){</span>
<span class="n">语句体1</span><span class="o">;</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">条件表达式2</span><span class="o">){</span>
<span class="n">语句体2</span><span class="o">;</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">条件表达式3</span><span class="o">){</span>
<span class="n">语句体3</span><span class="o">;</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">条件表达式4</span><span class="o">){</span>
<span class="n">语句体4</span><span class="o">;</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">条件表达式5</span><span class="o">){</span>
<span class="n">语句体5</span><span class="o">;</span>
<span class="o">}</span><span class="k">else</span><span class="o">{</span>
<span class="n">语句体6</span><span class="o">;</span>
<span class="o">}</span>

<span class="n">举例1</span><span class="err">：</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
<span class="k">if</span> <span class="o">(</span><span class="n">score</span> <span class="o">&gt;=</span><span class="n">90</span> <span class="o">&amp;&amp;</span> <span class="n">score</span> <span class="o">&lt;=</span><span class="n">100</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;优秀&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">score</span> <span class="o">&gt;=</span><span class="n">80</span> <span class="o">&amp;&amp;</span> <span class="n">score</span> <span class="o">&lt;=</span><span class="n">90</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;良好&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">score</span> <span class="o">&gt;=</span><span class="n">70</span> <span class="o">&amp;&amp;</span> <span class="n">score</span> <span class="o">&lt;=</span><span class="n">80</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;差不多儿&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">score</span> <span class="o">&gt;=</span><span class="n">60</span> <span class="o">&amp;&amp;</span> <span class="n">score</span> <span class="o">&lt;=</span><span class="n">70</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;及格&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">score</span> <span class="o">&gt;=</span><span class="n">50</span> <span class="o">&amp;&amp;</span> <span class="n">score</span> <span class="o">&lt;=</span><span class="n">60</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;不太好&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span><span class="o">{</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;太不好了&#34;</span><span class="o">);</span>
<span class="o">}</span>

<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;结束&#34;</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>

<span class="n">举例2</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
<span class="cm">/*
</span><span class="cm">需求：键盘录入学生考试成绩, 根据成绩程序给出不同的奖励。
</span><span class="cm">
</span><span class="cm">95~100分 : 自行车一辆
</span><span class="cm">90~94分  : 游乐场一次
</span><span class="cm">80~89分	 : 变形金刚一个
</span><span class="cm">80分以下 : 挨顿揍, 这座城市又多了一个伤心的人~
</span><span class="cm">
</span><span class="cm">步骤:
</span><span class="cm">1. 使用Scanner录入考试成绩
</span><span class="cm">2. 判断成绩是否在合法范围内 0~100
</span><span class="cm">非法的话, 给出错误提示
</span><span class="cm">3. 在合法的语句块中判断成绩范围符合哪一个奖励
</span><span class="cm">并给出对应的奖励.
</span><span class="cm">
</span><span class="cm">*/</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="c1">// 1. 使用Scanner录入考试成绩
</span><span class="c1"></span><span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;请输入您的成绩:&#34;</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
<span class="c1">// 2. 判断成绩是否在合法范围内 0~100
</span><span class="c1"></span><span class="k">if</span><span class="o">(</span><span class="n">score</span> <span class="o">&gt;=</span><span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">score</span> <span class="o">&lt;=</span> <span class="n">100</span><span class="o">){</span>
<span class="c1">// 合法成绩
</span><span class="c1">// 3. 在合法的语句块中判断成绩范围符合哪一个奖励
</span><span class="c1"></span><span class="k">if</span><span class="o">(</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="n">95</span> <span class="o">&amp;&amp;</span> <span class="n">score</span> <span class="o">&lt;=</span> <span class="n">100</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;自行车一辆&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="n">90</span> <span class="o">&amp;&amp;</span> <span class="n">score</span> <span class="o">&lt;=</span> <span class="n">94</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;游乐场一次&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="n">80</span> <span class="o">&amp;&amp;</span> <span class="n">score</span> <span class="o">&lt;=</span> <span class="n">89</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;变形金刚一个&#34;</span><span class="o">);</span>
<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;挨顿揍, 这座城市又多了一个伤心的人~&#34;</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span><span class="k">else</span><span class="o">{</span>
<span class="c1">// 非法的话, 给出错误提示
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;您的成绩输入有误!&#34;</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>
<span class="o">}</span>
<span class="k">switch</span> 

<span class="n">循环结构</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha1&#34;</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha1&#34;</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha1&#34;</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;haha1&#34;</span><span class="o">);</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Day01 介绍java</title>
			<link>https://demon-github1996.github.io/posts/day01/</link>
			<pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
			
			<guid>https://demon-github1996.github.io/posts/day01/</guid>
			<description>介绍java： ​	java 是一门语言， 汉语也是一门语言，是人和人交流的语言， java是人和计算机交流的语言， c c# c++ Python php&amp;hellip;. ​	1995年 高司令 创造的。
java的三个方向： JavaSE ： 方向就是做 桌面应用的 PC端软件 QQ LOL WOW DNF CF &amp;hellip;
​	但是java做这种软件 效果非常的差 界面非常的丑。 所以java也就放弃了这个方向。 ​	但是 JavaSE 是学习其他 任何方向的基础 Android javaEE(服务器) 大数据
JavaME ： 嵌入式驱动开发 遥控器驱动 &amp;hellip;.
​	Android 方向了。
JavaEE ： 做服务器的。 大型web服务器
​	淘宝 ​	京东 ​	&amp;hellip;.
java的火： ​	面向对象语言 ​	开源 ​	跨平台： ​	java的跨平台 是依赖 java虚拟机来跨平台的。 ​	跨平台的好处： 为开发人员 提高了开发效率 （本来开发3个qq，现在 开发一个qq就可以了。）</description>
			<content type="html"><![CDATA[<h1 id="介绍java">介绍java：</h1>
<p>​		java 是一门语言， 汉语也是一门语言，是人和人交流的语言， java是人和计算机交流的语言，  c c# c++ Python php&hellip;.
​			1995年 高司令 创造的。</p>
<h2 id="java的三个方向">java的三个方向：</h2>
<h5 id="javase">JavaSE</h5>
<p>： 方向就是做 桌面应用的 PC端软件 QQ LOL WOW DNF CF &hellip;</p>
<p>​				但是java做这种软件 效果非常的差  界面非常的丑。  所以java也就放弃了这个方向。
​				但是 JavaSE 是学习其他 任何方向的基础 Android javaEE(服务器) 大数据</p>
<h5 id="javame-">JavaME ：</h5>
<p>嵌入式驱动开发  遥控器驱动 &hellip;.</p>
<p>​			Android 方向了。</p>
<h5 id="javaee-">JavaEE ：</h5>
<p>做服务器的。 大型web服务器</p>
<p>​				淘宝
​				京东
​				&hellip;.</p>
<h5 id="java的火">java的火：</h5>
<p>​			面向对象语言
​			开源
​			跨平台：
​				java的跨平台 是依赖 java虚拟机来跨平台的。
​			跨平台的好处： 为开发人员 提高了开发效率 （本来开发3个qq，现在 开发一个qq就可以了。）</p>
<h5 id="jdk-jre-jvm-">jdk jre jvm ：</h5>
<p>​			
​			Oracle 公司 并没有 jvm的安装包。 但是他却提供了 jdk的安装包。  jre的安装包。</p>
<h6 id="jdk">jdk：</h6>
<p>​				开发工具： 编译工具 javac.exe   jar.exe  javawar.exe  javadoc.exe</p>
<h6 id="jre">jre：</h6>
<p>​					核心类库 : 提供大量的类  String  System
​					jvm：解析程序中的一些语法格式和逻辑。
​					
​					一个再简单的程序 执行 必须依赖两个东西 核心类库 和jvm   这两个也就是组成了jre</p>
<h6 id="jdk的安装和下载">jdk的安装和下载：</h6>
<p>​		1：有的同学已经安装了jdk了， 但是安装的 jdk11版本  jdk8版本， 都可以。 不需要卸载。 就使用已经安装的版本就可以了。
​		2：一个电脑上可以安装多个 jdk ，同样你也不需要卸载 ， 
​			那以后我到底用的哪个jdk啊？  等会儿配置环境变量 你就知道了，   你环境变量里面配置的哪一个 就是用的哪一个。
​		3：以后只要是安装 开发类的软件， 安装路径 都尽量别有中文和空格。</p>
<h2 id="helloworld">HelloWorld</h2>
<h3 id="dos命令">dos命令：</h3>
<p>​		d: 切换盘
​		cd : 进入目录。  c change切换   d  directory目录
​		dir : 展示目录下的所有文件和目录     dir   directory目录
​			每一个目录(除了盘符的) 都有两个隐含的目录 (.   .. )
​			.代表的是当前目录，  所以 cd.  进入当前目录
​			.. 代表的是 上一级目录
​				所以cd.. 是回退到上一级目录</p>
<p>​			在linux操作系统中，  所有目录的根目录 都是 / 目录   / 这是一个目录  是所有目录的跟目录。</p>
<p>​			所以 cd / 就是进入根目录
​		
​		cls 是清屏的意思
​		exit 退出cmd</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">书写</span><span class="err">：</span>
<span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;shfashdfjadh&#34;</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p><strong><!-- raw HTML omitted -->此处有错题笔记详见Note1<!-- raw HTML omitted --></strong></p>
<h1 id="java的重要内容">JAVA的重要内容：</h1>
<h2 id="编写编译运行">编写编译运行(☆☆☆☆☆)：</h2>
<h3 id="1编写">1.	编写：</h3>
<p>​				新建一个txt文件， 然后后缀改为.java ，此处注意 操作系统尽量不要隐藏文件拓展名，否则无法更改拓展名。
​</p>
<p>​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>  <span class="c1">// args   arguments
</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;helloworld&#34;</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;helloworld1&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>​			注意：文件名字 和  class 后的名字 要一致。
​</p>
<h3 id="2编译-javac-demojava">2	编译： javac Demo.java</h3>
<p>​			编译成功的标志是  生成一个class文件。
​			注意： 你需要先用cmd进入到 Demo.java的目录 才可以编译，否则找不到Demo.java
​</p>
<h3 id="3运行-java-demo">3	运行： java Demo</h3>
<p>​			注意：运行的是class文件，但是不需要 加.class 
​	
​	HelloWorld程序的详细解释：
​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// public  起到一个限定的做。 类名 必须和文件名要相同， 不同就会报错。
</span><span class="c1"></span><span class="err">​</span>		<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>   <span class="c1">// 今后我们所有的代码 必须要写在类中的， 所以要写其他的代码必须要先写一个类的。
</span><span class="c1"></span>    <span class="err">​</span>			
        <span class="err">​</span>			<span class="c1">// main方法。程序的入口
</span><span class="c1"></span>        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">sdafsdfasdfasdfasdfasdfasdfadfasdfadafasdf</span><span class="o">){</span>  <span class="c1">// args   arguments
</span><span class="c1"></span>        <span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;helloworld&#34;</span><span class="o">);</span>
        <span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;helloworld1&#34;</span><span class="o">);</span>
        <span class="err">​</span>			<span class="o">}</span>

    <span class="err">​</span>		<span class="o">}</span>
</code></pre></div><h2 id="代码的书写习惯">代码的书写习惯：</h2>
<p>(不是语法，是程序员们的习惯，你可以不遵守，不会报错，但是其他的程序员看到你这么写了 就会给你一个大大的中指)
当你遇到一个{ 的时候 换行。 并且和上一行搓一个tab键。
遇到; 换行，和上一行对齐就可以了， 不需要搓tab
}必须和 对应的{ 的那一行的行首对齐。</p>
<pre><code>    这么做的好处：
        1：不用把所有的错误都发生在一行。
        2：能够清晰的看到代码的 包含关系。
</code></pre>
<h2 id="乱码问题">乱码问题：</h2>
<p>​		新建一个txt文件，   如果你是win10操作系统， txt软件编写文字的默认编码是 utf-8编码。
​		但是 打开的cmd ，黑窗口的默认编码 是 GBK(ANSI) 本地编码。
​		
​		两个编码不一致 中文就会乱码，
​		所以 如果我们使用记事本新建一个文件 需要另存为 <strong>ANSI</strong>的
​		如果我们使用 notepad++来新建一个文件  则需要设置 notepad++ 的新建选项。</p>
<h2 id="java的基本语法">java的基本语法(☆☆☆☆☆)：</h2>
<h3 id="java程序的组成">java程序的组成：</h3>
<p>（无论程序多么复杂都是有如下几部分组成的）
注释(非必须)：
关键字：
标识符：
数据：
常量
变量
符号：
基本的符号：
空格：  把单词间隔开的符号。
运算符：</p>
<h3 id="注释">注释(☆☆☆)：</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">                            <span class="n">单行注释</span>
                                <span class="err">​</span>				<span class="c1">// sdfsdfsdfs
</span><span class="c1"></span>                                <span class="err">​</span>			<span class="n">多行注释</span><span class="err">：</span>
                                <span class="err">​</span>				<span class="cm">/*
</span><span class="cm">                                                ​					fsdfsdfadsfasdfasdf
</span><span class="cm">                                                ​					adfasdfsadfasdfas
</span><span class="cm">                                                ​				*/</span>

                                <span class="err">​</span>			<span class="cm">/*sdfsdafasdfasdfasdf*/</span>
                                <span class="err">​</span>		
                                <span class="err">​</span>		<span class="n">文档注释</span><span class="err">：</span>
                                <span class="err">​</span>			<span class="cm">/**
</span><span class="cm">
</span><span class="cm">                                                ​			*/</span>
</code></pre></div><h3 id="关键字">关键字(☆☆☆☆☆)：</h3>
<p>java这门语言 规定的 给了一些单词特有的含义，这些单词就是关键字。
<strong>public</strong> : 公共的，  特殊含义， 被public修饰的类 类名字 必须和java文件的名字相同。
<strong>class</strong> 类
<strong>static</strong> 静态的
<strong>void</strong> 方法没有返回值的</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">		<span class="c1">// 注释
</span><span class="c1"></span>		<span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
			<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;sdfsdfs&#34;</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
</code></pre></div><h3 id="常量数据">常量数据(☆☆☆☆☆)：</h3>
<p>​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">		<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>   
<span class="err">​</span>				<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span> 
<span class="err">​</span>					<span class="c1">//字符串常量
</span><span class="c1"></span><span class="err">​</span>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span> <span class="c1">// 没有内容
</span><span class="c1"></span><span class="err">​</span>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;adfkasd黑马jfkasdjlk&#34;</span><span class="o">);</span>  
<span class="err">​</span>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">);</span> 
<span class="err">​</span>					

<span class="err">​</span>				<span class="c1">//字符常量
</span><span class="c1"></span><span class="err">​</span>				<span class="c1">//System.out.println(&#39;&#39;); //报错。
</span><span class="c1"></span><span class="err">​</span>				<span class="c1">//System.out.println(&#39;ab&#39;);  //报错。
</span><span class="c1"></span><span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="sc">&#39;中&#39;</span><span class="o">);</span>
<span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="sc">&#39;*&#39;</span><span class="o">);</span>

<span class="err">​</span>				<span class="c1">//整数常量
</span><span class="c1"></span><span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">10</span><span class="o">);</span>

<span class="err">​</span>				<span class="c1">//小数常量
</span><span class="c1"></span><span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">10</span><span class="o">.</span><span class="na">14</span><span class="o">);</span>

<span class="err">​</span>				<span class="c1">//布尔常量
</span><span class="c1"></span><span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>

<span class="err">​</span>				<span class="c1">//空常量  用来占位。
</span><span class="c1"></span><span class="err">​</span>				<span class="c1">//System.out.println(null);  // 报错 				
</span><span class="c1"></span><span class="err">​</span>			<span class="o">}</span>
<span class="err">​</span>		<span class="o">}</span>
<span class="err">​</span>		<span class="c1">//我给你10块钱 你去给我买一根冰糕。    // 10是一个 整数常量
</span><span class="c1"></span><span class="err">​</span>		<span class="c1">//我给你钱包 你去给我买一根冰糕。  //钱包是一个变量
</span></code></pre></div><h3 id="变量数据">变量数据(☆☆☆☆☆)：</h3>
<p>​			<strong>定义格式： 数据类型 变量名 =  数据值;</strong>
​</p>
<h4 id="数据类型">数据类型：</h4>
<p>​			bit 和 byte 
​				计算机中就是一个大的电路板，里面集成了很多晶体管，电阻 电容， 直流电 流经电阻，两端会有电势差(电压)  流经电容，直接阻断(低电压)
​				高电压，表示1   低电压 0.<br>
​				我们也把这种一个 信号  叫做 bit 位。
​				但是 你发现了吗 这一个信号 只能要么表示0 要么表示1 那也表示不过来 现实生活中这些庞大的数据啊。
​				8个bit位 为一组， 来表示数据， 我们就把这8个为一组 叫做 byte 字节 计算机最小的存储单元。
​					-128  127
​								
​		<strong>分类</strong>：**
​				**基本数据类型**
​					**整型**
​						**byte    1	-128 127**
​						**short	2   -32768 32767**
​						**int		4   正负21亿左右**
​						**long	8**
​					**浮点型**
​						**float	4**
​						**double	8**
​					**字符型**
​						**char	2**
​					**布尔型**
​						boolean	1 (java的官方声明  boolean 类型没有明确的大小 )**
​				引用数据类型(综合类型)
​					数组
​					类
​					接口
​			
​			表示数据范围的大小顺序：
​				byte &lt; short = char &lt; int &lt; long  &lt;float &lt; double 
​							
​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">	<span class="n">代码</span><span class="err">：</span>
<span class="err">​</span>			<span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
<span class="err">​</span>				<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="err">​</span>					<span class="c1">//数据类型 变量名 =  数据值;
</span><span class="c1"></span><span class="err">​</span>					<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span><span class="n">10</span><span class="o">;</span>
<span class="err">​</span>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">//10
</span><span class="c1"></span>
<span class="err">​</span>					<span class="kt">byte</span> <span class="n">b</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="err">​</span>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span> <span class="c1">//10
</span><span class="c1"></span><span class="err">​</span>					
<span class="err">​</span>					<span class="kt">double</span> <span class="n">d</span>  <span class="o">=</span> <span class="n">3</span><span class="o">.</span><span class="na">14</span><span class="o">;</span>
<span class="err">​</span>					<span class="c1">// int c = 3.14;  // 报错。
</span><span class="c1"></span><span class="err">​</span>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">d</span><span class="o">);</span> <span class="c1">// 3.14
</span><span class="c1"></span>
<span class="err">​</span>					<span class="c1">//int e = true;  //报错。
</span><span class="c1"></span><span class="err">​</span>					<span class="kt">boolean</span> <span class="n">e</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> 
<span class="err">​</span>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span> <span class="c1">// true
</span><span class="c1"></span>
<span class="err">​</span>					<span class="kt">char</span> <span class="n">f</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="o">;</span>
<span class="err">​</span>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">);</span> <span class="c1">//a
</span><span class="c1"></span> 						
<span class="err">​</span>				<span class="o">}</span>
<span class="err">​</span>			<span class="o">}</span>
</code></pre></div><p>​		注意事项：
​</p>
<p><!-- raw HTML omitted -->1：变量的定义格式 可以分开，一个是定义 一个是赋值<!-- raw HTML omitted --></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">	<span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
					<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
						<span class="c1">//int  a = 10;
</span><span class="c1"></span>						<span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
						<span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span> <span class="c1">// 可以的
</span><span class="c1"></span>						<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">//10
</span><span class="c1"></span>					<span class="o">}</span>
				<span class="o">}</span>
</code></pre></div><p>​	<!-- raw HTML omitted -->2：同一个范围内(作用域范围，作用域下面讲了) 变量不能重复定义。<!-- raw HTML omitted -->
​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">	<span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
					<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
						<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
						<span class="c1">//int a = 20;   //报错
</span><span class="c1"></span>						<span class="n">a</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span> <span class="c1">//正确
</span><span class="c1"></span>						<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">//10
</span><span class="c1"></span>					<span class="o">}</span>
				<span class="o">}</span>
</code></pre></div><p><!-- raw HTML omitted -->3:变量可以一次定义多个<!-- raw HTML omitted --></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">	<span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
<span class="err">​</span>					<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="err">​</span>						<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="err">​</span>						<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="err">​</span>						<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">30</span><span class="o">;</span>

<span class="err">​</span>						<span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">40</span><span class="o">,</span> <span class="n">e</span> <span class="o">=</span> <span class="n">50</span><span class="o">,</span> <span class="n">f</span><span class="o">=</span><span class="n">60</span><span class="o">;</span>

<span class="err">​</span>						<span class="kt">int</span> <span class="n">g</span><span class="o">,</span><span class="n">h</span><span class="o">,</span><span class="n">k</span><span class="o">;</span>
<span class="err">​</span>						<span class="n">g</span> <span class="o">=</span> <span class="n">70</span><span class="o">;</span>
<span class="err">​</span>						<span class="n">h</span> <span class="o">=</span> <span class="n">80</span><span class="o">;</span>
<span class="err">​</span>						<span class="n">k</span> <span class="o">=</span> <span class="n">90</span><span class="o">;</span>
<span class="err">​</span>					<span class="o">}</span>
<span class="err">​</span>				<span class="o">}</span>
<span class="err">​</span>			
</code></pre></div><p><!-- raw HTML omitted -->4:局部变量 使用之前必须先赋值，不赋值不能使用。<!-- raw HTML omitted --></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
					<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
						<span class="kt">int</span> <span class="n">a</span> <span class="o">;</span>
						<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">// 报错  
</span><span class="c1"></span>					<span class="o">}</span>
				<span class="o">}</span>
			
</code></pre></div><p><!-- raw HTML omitted -->5：变量的作用域，只在 从他定义开始一直到当前大括号结束 这一段有效。<!-- raw HTML omitted --></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">				<span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
					<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
						<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
						<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">// 10
</span><span class="c1"></span>						<span class="o">{</span>
							<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">//10
</span><span class="c1"></span>							<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
							<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span> <span class="c1">//20
</span><span class="c1"></span>						<span class="o">}</span>
						<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span> <span class="c1">//报错
</span><span class="c1"></span>					<span class="o">}</span>
				<span class="o">}</span>
</code></pre></div><p>​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">	<span class="kd">class</span> <span class="nc">Demo1</span> <span class="o">{</span>
					<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
						<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
						<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">// 10
</span><span class="c1"></span>						<span class="o">{</span>
							<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">//10
</span><span class="c1"></span>							<span class="c1">//int a  = 20;  //报错  因为上面的a 的作用域 包括这里
</span><span class="c1"></span>							<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
						<span class="o">}</span>
						<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">30</span><span class="o">;</span><span class="c1">// 
</span><span class="c1"></span>						<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span> <span class="c1">//30
</span><span class="c1"></span>						
					<span class="o">}</span>
				<span class="o">}</span>
			
</code></pre></div><p><!-- raw HTML omitted -->6：float类型的数据后面要加F  long类型的数据后面要加 L<!-- raw HTML omitted --></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">			<span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
					<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
						<span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="n">3</span><span class="o">.</span><span class="na">14F</span><span class="o">;</span>
						<span class="kt">long</span> <span class="n">lo</span> <span class="o">=</span> <span class="n">100L</span><span class="o">;</span>
					<span class="o">}</span>
				<span class="o">}</span>
</code></pre></div><hr>
<p>​	<strong>重温变量和常量的定义概念：</strong>
​		<strong>常量：运行过程中其值不不能改变的量。</strong>
​		变量：运行过程中其值可以发生改变的量。**</p>
<p>​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Demo1</span> <span class="o">{</span>
			<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">20</span><span class="o">);</span>

<span class="err">​</span>				<span class="n">20</span> <span class="o">=</span> <span class="n">30</span><span class="o">;</span>
<span class="err">​</span>			<span class="o">}</span>
<span class="err">​</span>		<span class="o">}</span>
</code></pre></div><p>​</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">	<span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
<span class="err">​</span>			<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">20</span><span class="o">);</span>

<span class="err">​</span>				<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="err">​</span>				<span class="n">a</span> <span class="o">=</span> <span class="n">30</span><span class="o">;</span>
<span class="err">​</span>			<span class="o">}</span>
<span class="err">​</span>		<span class="o">}</span>
<span class="err">​</span>	
</code></pre></div><h4 id="scanner-">Scanner(☆☆☆☆) :</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">		<span class="c1">//第一步： 导包
</span><span class="c1"></span><span class="err">​</span>		<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="err">​</span>		<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo3</span> <span class="o">{</span>
<span class="err">​</span>			<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="err">​</span>				<span class="c1">// 第二步： 创建键盘录入对象
</span><span class="c1"></span><span class="err">​</span>				<span class="n">Scanner</span> <span class="n">hh</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span> <span class="c1">// 只有sc可以变。
</span><span class="c1"></span>
<span class="err">​</span>				<span class="c1">// 第三步： 接收键盘录入的数据
</span><span class="c1"></span><span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;请您输入 数字&#34;</span><span class="o">);</span>
<span class="err">​</span>				<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">hh</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
<span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;您输入的数字 如下，您看对不对呢&#34;</span><span class="o">);</span>
<span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>

<span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;请您再输入 数字&#34;</span><span class="o">);</span>
<span class="err">​</span>				<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">hh</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
<span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;您第二次输入的数字 如下，您看对不对呢&#34;</span><span class="o">);</span>
<span class="err">​</span>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
<span class="err">​</span>			<span class="o">}</span>
<span class="err">​</span>		<span class="o">}</span>
</code></pre></div><h2 id="标识符">标识符(☆☆☆☆☆)：</h2>
<p>起名字</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Demo3</span> <span class="o">{</span>
				<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
					<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
					<span class="c1">//int 100 = 10;
</span><span class="c1"></span>				<span class="o">}</span>
			<span class="o">}</span>
</code></pre></div><p>​			语法规定：
​				1：a到zA到Z0到9 $_
​				2：不能是关键字。
​				3：不能以数字开头</p>
<p>​		约定俗成的习惯：
​			大驼峰 ： 类
​			小驼峰 ： 变量 方法
​			峡谷先锋 ：常量名
​				所有字母都大写，如果多个单词 中间用下划线隔开。  JAVA_HOME</p>
]]></content>
		</item>
		
	</channel>
</rss>
